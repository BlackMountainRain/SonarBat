syntax = "proto3";

package api.auth.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "errors/errors.proto";

option go_package = "sonar-bat/api/auth/v1;v1";
option java_multiple_files = true;
option java_package = "api.auth.v1";

service Auth {
	rpc SignIn (SignInRequest) returns (AuthReply) {
		option (google.api.http) = {
			post: "/api/v1/auth/sign-in/password"
			body: "*"
		};
	};
	rpc SignInWithOAuth (SignInWithOAuthRequest) returns (AuthReply) {
		option (google.api.http) = {
			post: "/api/v1/auth/sign-in/oauth"
			body: "*"
		};
	};
	rpc SignUp (SignUpRequest) returns (AuthReply) {
		option (google.api.http) = {
			post: "/api/v1/auth/sign-up"
			body: "*"
		};
	};
	rpc GetSupportedOAuthProviders (EmptyRequest) returns (SupportedOAuthProvidersReply) {
		option (google.api.http) = {
			get: "/api/v1/auth/oauth/providers"
		};
	};
	rpc ValidateJWT (ValidateJWTRequest) returns (UserInfoReply) {
		option (google.api.http) = {
			post: "/api/v1/auth/validate-jwt"
			body: "*"
		};
	};
	rpc CheckPermission (CheckPermissionRequest) returns (PermissionReply) {
		option (google.api.http) = {
			post: "/api/v1/auth/check-permission"
			body: "*"
		};
	};
	rpc RequestPasswordReset (RequestPasswordResetRequest) returns (RequestPasswordResetReply) {
		option (google.api.http) = {
			post: "/api/v1/auth/request-password-reset"
			body: "*"
		};
	}
	rpc VerifyPasswordResetToken (VerifyPasswordResetTokenRequest) returns (VerifyPasswordResetTokenReply) {
		option (google.api.http) = {
			get: "/api/v1/auth/verify-password-reset-token"
		};
	}
	rpc ResetPassword (ResetPasswordRequest) returns (ResetPasswordReply) {
		option (google.api.http) = {
			post: "/api/v1/auth/reset-password"
			body: "*"
		};
	}
}

message SignInRequest {
	string email = 1;
	string password = 2;
}

message SignInWithOAuthRequest {
	string provider = 1;
	string code = 2;
}

message SignUpRequest {
	string email = 1 [(validate.rules).string.email = true];
	string password = 2 [(validate.rules).string = {min_len: 5, max_len: 50}];
}

message EmptyRequest {}

message SupportedOAuthProvider {
	string provider = 1;
	string authorize_url = 2;
	string client_id = 3;
	string redirect_uri = 4;
	string scope = 5;
	string response_type = 6;
}

message SupportedOAuthProvidersReply {
	repeated SupportedOAuthProvider providers = 1;
}

message ValidateJWTRequest {
	string jwt = 1;
}

message UserInfoReply {
	string username = 1;
	string email = 2;
	map<string, string> additional_info = 3;
}

message CheckPermissionRequest {
	string jwt = 1;
	string role = 2;
	string obj = 3;
	string act = 4;
	string uri = 5;
}

message PermissionReply {
	bool has_permission = 1;
}

message AuthReply {
	string token = 1;
}

message RequestPasswordResetRequest {
	string email = 1;
}

message RequestPasswordResetReply {
	string status = 1;
}

message VerifyPasswordResetTokenRequest {
	string token = 1;
}

message VerifyPasswordResetTokenReply {
	bool valid = 1;
}

message ResetPasswordRequest {
	string token = 1;
	string newPassword = 2;
}

message ResetPasswordReply {
	string status = 1;
}

enum ErrorReason {
	option (errors.default_code) = 500;
	USER_NOT_FOUND = 0 [(errors.code) = 404];
	USER_ALREADY_EXISTS = 1 [(errors.code) = 409];
	INVALID_EMAIL_OR_PASSWORD = 2 [(errors.code) = 401];
}
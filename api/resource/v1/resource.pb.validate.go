// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/resource/v1/resource.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HealthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthRequestMultiError, or
// nil if none found.
func (m *HealthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HealthRequestMultiError(errors)
	}

	return nil
}

// HealthRequestMultiError is an error wrapping multiple validation errors
// returned by HealthRequest.ValidateAll() if the designated constraints
// aren't met.
type HealthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthRequestMultiError) AllErrors() []error { return m }

// HealthRequestValidationError is the validation error returned by
// HealthRequest.Validate if the designated constraints aren't met.
type HealthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthRequestValidationError) ErrorName() string { return "HealthRequestValidationError" }

// Error satisfies the builtin error interface
func (e HealthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthRequestValidationError{}

// Validate checks the field values on HealthReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthReplyMultiError, or
// nil if none found.
func (m *HealthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetUptime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HealthReplyValidationError{
					field:  "Uptime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HealthReplyValidationError{
					field:  "Uptime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUptime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HealthReplyValidationError{
				field:  "Uptime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HealthReplyMultiError(errors)
	}

	return nil
}

// HealthReplyMultiError is an error wrapping multiple validation errors
// returned by HealthReply.ValidateAll() if the designated constraints aren't met.
type HealthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthReplyMultiError) AllErrors() []error { return m }

// HealthReplyValidationError is the validation error returned by
// HealthReply.Validate if the designated constraints aren't met.
type HealthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthReplyValidationError) ErrorName() string { return "HealthReplyValidationError" }

// Error satisfies the builtin error interface
func (e HealthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthReplyValidationError{}

// Validate checks the field values on CreateHostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateHostRequestMultiError, or nil if none found.
func (m *CreateHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for IsAgentInstalled

	// no validation rules for AgentVersion

	// no validation rules for NetType

	// no validation rules for Additions

	if all {
		switch v := interface{}(m.GetLiveAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateHostRequestValidationError{
					field:  "LiveAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateHostRequestValidationError{
					field:  "LiveAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLiveAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateHostRequestValidationError{
				field:  "LiveAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateHostRequestMultiError(errors)
	}

	return nil
}

// CreateHostRequestMultiError is an error wrapping multiple validation errors
// returned by CreateHostRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateHostRequestMultiError) AllErrors() []error { return m }

// CreateHostRequestValidationError is the validation error returned by
// CreateHostRequest.Validate if the designated constraints aren't met.
type CreateHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHostRequestValidationError) ErrorName() string {
	return "CreateHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHostRequestValidationError{}

// Validate checks the field values on CreateHostReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateHostReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateHostReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateHostReplyMultiError, or nil if none found.
func (m *CreateHostReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateHostReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateHostReplyMultiError(errors)
	}

	return nil
}

// CreateHostReplyMultiError is an error wrapping multiple validation errors
// returned by CreateHostReply.ValidateAll() if the designated constraints
// aren't met.
type CreateHostReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateHostReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateHostReplyMultiError) AllErrors() []error { return m }

// CreateHostReplyValidationError is the validation error returned by
// CreateHostReply.Validate if the designated constraints aren't met.
type CreateHostReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHostReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHostReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHostReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHostReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHostReplyValidationError) ErrorName() string { return "CreateHostReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateHostReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHostReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHostReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHostReplyValidationError{}

// Validate checks the field values on UpdateHostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateHostRequestMultiError, or nil if none found.
func (m *UpdateHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for IsAgentInstalled

	// no validation rules for AgentVersion

	// no validation rules for NetType

	// no validation rules for Additions

	if all {
		switch v := interface{}(m.GetLiveAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateHostRequestValidationError{
					field:  "LiveAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateHostRequestValidationError{
					field:  "LiveAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLiveAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateHostRequestValidationError{
				field:  "LiveAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateHostRequestMultiError(errors)
	}

	return nil
}

// UpdateHostRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateHostRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateHostRequestMultiError) AllErrors() []error { return m }

// UpdateHostRequestValidationError is the validation error returned by
// UpdateHostRequest.Validate if the designated constraints aren't met.
type UpdateHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHostRequestValidationError) ErrorName() string {
	return "UpdateHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHostRequestValidationError{}

// Validate checks the field values on UpdateHostReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateHostReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateHostReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateHostReplyMultiError, or nil if none found.
func (m *UpdateHostReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateHostReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RowsAffected

	if len(errors) > 0 {
		return UpdateHostReplyMultiError(errors)
	}

	return nil
}

// UpdateHostReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateHostReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateHostReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateHostReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateHostReplyMultiError) AllErrors() []error { return m }

// UpdateHostReplyValidationError is the validation error returned by
// UpdateHostReply.Validate if the designated constraints aren't met.
type UpdateHostReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHostReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHostReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHostReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHostReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHostReplyValidationError) ErrorName() string { return "UpdateHostReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateHostReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHostReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHostReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHostReplyValidationError{}

// Validate checks the field values on OverwriteHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OverwriteHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OverwriteHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OverwriteHostRequestMultiError, or nil if none found.
func (m *OverwriteHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OverwriteHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Additions

	if all {
		switch v := interface{}(m.GetLiveAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OverwriteHostRequestValidationError{
					field:  "LiveAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OverwriteHostRequestValidationError{
					field:  "LiveAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLiveAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OverwriteHostRequestValidationError{
				field:  "LiveAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.IsAgentInstalled != nil {
		// no validation rules for IsAgentInstalled
	}

	if m.AgentVersion != nil {
		// no validation rules for AgentVersion
	}

	if m.NetType != nil {
		// no validation rules for NetType
	}

	if len(errors) > 0 {
		return OverwriteHostRequestMultiError(errors)
	}

	return nil
}

// OverwriteHostRequestMultiError is an error wrapping multiple validation
// errors returned by OverwriteHostRequest.ValidateAll() if the designated
// constraints aren't met.
type OverwriteHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OverwriteHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OverwriteHostRequestMultiError) AllErrors() []error { return m }

// OverwriteHostRequestValidationError is the validation error returned by
// OverwriteHostRequest.Validate if the designated constraints aren't met.
type OverwriteHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverwriteHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverwriteHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverwriteHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverwriteHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverwriteHostRequestValidationError) ErrorName() string {
	return "OverwriteHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OverwriteHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOverwriteHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverwriteHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverwriteHostRequestValidationError{}

// Validate checks the field values on OverwriteHostReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OverwriteHostReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OverwriteHostReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OverwriteHostReplyMultiError, or nil if none found.
func (m *OverwriteHostReply) ValidateAll() error {
	return m.validate(true)
}

func (m *OverwriteHostReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RowsAffected

	if len(errors) > 0 {
		return OverwriteHostReplyMultiError(errors)
	}

	return nil
}

// OverwriteHostReplyMultiError is an error wrapping multiple validation errors
// returned by OverwriteHostReply.ValidateAll() if the designated constraints
// aren't met.
type OverwriteHostReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OverwriteHostReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OverwriteHostReplyMultiError) AllErrors() []error { return m }

// OverwriteHostReplyValidationError is the validation error returned by
// OverwriteHostReply.Validate if the designated constraints aren't met.
type OverwriteHostReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverwriteHostReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverwriteHostReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverwriteHostReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverwriteHostReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverwriteHostReplyValidationError) ErrorName() string {
	return "OverwriteHostReplyValidationError"
}

// Error satisfies the builtin error interface
func (e OverwriteHostReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOverwriteHostReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverwriteHostReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverwriteHostReplyValidationError{}

// Validate checks the field values on DeleteHostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteHostRequestMultiError, or nil if none found.
func (m *DeleteHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteHostRequestMultiError(errors)
	}

	return nil
}

// DeleteHostRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteHostRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteHostRequestMultiError) AllErrors() []error { return m }

// DeleteHostRequestValidationError is the validation error returned by
// DeleteHostRequest.Validate if the designated constraints aren't met.
type DeleteHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHostRequestValidationError) ErrorName() string {
	return "DeleteHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHostRequestValidationError{}

// Validate checks the field values on DeleteHostReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteHostReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteHostReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteHostReplyMultiError, or nil if none found.
func (m *DeleteHostReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteHostReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RowsAffected

	if len(errors) > 0 {
		return DeleteHostReplyMultiError(errors)
	}

	return nil
}

// DeleteHostReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteHostReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteHostReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteHostReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteHostReplyMultiError) AllErrors() []error { return m }

// DeleteHostReplyValidationError is the validation error returned by
// DeleteHostReply.Validate if the designated constraints aren't met.
type DeleteHostReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHostReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHostReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHostReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHostReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHostReplyValidationError) ErrorName() string { return "DeleteHostReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteHostReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHostReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHostReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHostReplyValidationError{}

// Validate checks the field values on GetHostRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetHostRequestMultiError,
// or nil if none found.
func (m *GetHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetHostRequestMultiError(errors)
	}

	return nil
}

// GetHostRequestMultiError is an error wrapping multiple validation errors
// returned by GetHostRequest.ValidateAll() if the designated constraints
// aren't met.
type GetHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHostRequestMultiError) AllErrors() []error { return m }

// GetHostRequestValidationError is the validation error returned by
// GetHostRequest.Validate if the designated constraints aren't met.
type GetHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHostRequestValidationError) ErrorName() string { return "GetHostRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHostRequestValidationError{}

// Validate checks the field values on GetHostReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetHostReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHostReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetHostReplyMultiError, or
// nil if none found.
func (m *GetHostReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHostReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for IsAgentInstalled

	// no validation rules for AgentVersion

	// no validation rules for NetType

	// no validation rules for Additions

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetLiveAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHostReplyValidationError{
					field:  "LiveAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHostReplyValidationError{
					field:  "LiveAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLiveAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHostReplyValidationError{
				field:  "LiveAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetHostReplyMultiError(errors)
	}

	return nil
}

// GetHostReplyMultiError is an error wrapping multiple validation errors
// returned by GetHostReply.ValidateAll() if the designated constraints aren't met.
type GetHostReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHostReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHostReplyMultiError) AllErrors() []error { return m }

// GetHostReplyValidationError is the validation error returned by
// GetHostReply.Validate if the designated constraints aren't met.
type GetHostReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHostReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHostReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHostReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHostReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHostReplyValidationError) ErrorName() string { return "GetHostReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetHostReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHostReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHostReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHostReplyValidationError{}

// Validate checks the field values on SingleHost with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SingleHost) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingleHost with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SingleHostMultiError, or
// nil if none found.
func (m *SingleHost) ValidateAll() error {
	return m.validate(true)
}

func (m *SingleHost) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for IsAgentInstalled

	// no validation rules for AgentVersion

	// no validation rules for NetType

	// no validation rules for Additions

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetLiveAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SingleHostValidationError{
					field:  "LiveAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SingleHostValidationError{
					field:  "LiveAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLiveAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleHostValidationError{
				field:  "LiveAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SingleHostMultiError(errors)
	}

	return nil
}

// SingleHostMultiError is an error wrapping multiple validation errors
// returned by SingleHost.ValidateAll() if the designated constraints aren't met.
type SingleHostMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingleHostMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingleHostMultiError) AllErrors() []error { return m }

// SingleHostValidationError is the validation error returned by
// SingleHost.Validate if the designated constraints aren't met.
type SingleHostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleHostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleHostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleHostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleHostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleHostValidationError) ErrorName() string { return "SingleHostValidationError" }

// Error satisfies the builtin error interface
func (e SingleHostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleHost.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleHostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleHostValidationError{}

// Validate checks the field values on GetHostsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHostsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHostsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHostsRequestMultiError, or nil if none found.
func (m *GetHostsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHostsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetHostsRequestMultiError(errors)
	}

	return nil
}

// GetHostsRequestMultiError is an error wrapping multiple validation errors
// returned by GetHostsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetHostsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHostsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHostsRequestMultiError) AllErrors() []error { return m }

// GetHostsRequestValidationError is the validation error returned by
// GetHostsRequest.Validate if the designated constraints aren't met.
type GetHostsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHostsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHostsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHostsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHostsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHostsRequestValidationError) ErrorName() string { return "GetHostsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetHostsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHostsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHostsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHostsRequestValidationError{}

// Validate checks the field values on GetHostsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetHostsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHostsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetHostsReplyMultiError, or
// nil if none found.
func (m *GetHostsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHostsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetHostsReplyValidationError{
						field:  fmt.Sprintf("Hosts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetHostsReplyValidationError{
						field:  fmt.Sprintf("Hosts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetHostsReplyValidationError{
					field:  fmt.Sprintf("Hosts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetHostsReplyMultiError(errors)
	}

	return nil
}

// GetHostsReplyMultiError is an error wrapping multiple validation errors
// returned by GetHostsReply.ValidateAll() if the designated constraints
// aren't met.
type GetHostsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHostsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHostsReplyMultiError) AllErrors() []error { return m }

// GetHostsReplyValidationError is the validation error returned by
// GetHostsReply.Validate if the designated constraints aren't met.
type GetHostsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHostsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHostsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHostsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHostsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHostsReplyValidationError) ErrorName() string { return "GetHostsReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetHostsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHostsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHostsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHostsReplyValidationError{}

// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.21.12
// source: resource/v1/resource.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationResourceCreateHost = "/api.resource.v1.Resource/CreateHost"
const OperationResourceDeleteHost = "/api.resource.v1.Resource/DeleteHost"
const OperationResourceGetHost = "/api.resource.v1.Resource/GetHost"
const OperationResourceGetHosts = "/api.resource.v1.Resource/GetHosts"
const OperationResourceHealthCheck = "/api.resource.v1.Resource/HealthCheck"
const OperationResourceOverwriteHost = "/api.resource.v1.Resource/OverwriteHost"
const OperationResourceUpdateHost = "/api.resource.v1.Resource/UpdateHost"

type ResourceHTTPServer interface {
	CreateHost(context.Context, *CreateHostRequest) (*CreateHostReply, error)
	DeleteHost(context.Context, *DeleteHostRequest) (*DeleteHostReply, error)
	GetHost(context.Context, *GetHostRequest) (*GetHostReply, error)
	GetHosts(context.Context, *GetHostsRequest) (*GetHostsReply, error)
	HealthCheck(context.Context, *HealthRequest) (*HealthReply, error)
	OverwriteHost(context.Context, *OverwriteHostRequest) (*OverwriteHostReply, error)
	UpdateHost(context.Context, *UpdateHostRequest) (*UpdateHostReply, error)
}

func RegisterResourceHTTPServer(s *http.Server, srv ResourceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/resource/health", _Resource_HealthCheck2_HTTP_Handler(srv))
	r.POST("/api/v1/hosts", _Resource_CreateHost0_HTTP_Handler(srv))
	r.PATCH("/api/v1/hosts", _Resource_UpdateHost0_HTTP_Handler(srv))
	r.PUT("/api/v1/hosts", _Resource_OverwriteHost0_HTTP_Handler(srv))
	r.DELETE("/api/v1/hosts/{id}", _Resource_DeleteHost0_HTTP_Handler(srv))
	r.GET("/api/v1/hosts/{id}", _Resource_GetHost0_HTTP_Handler(srv))
	r.GET("/api/v1/hosts", _Resource_GetHosts0_HTTP_Handler(srv))
}

func _Resource_HealthCheck2_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HealthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceHealthCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HealthCheck(ctx, req.(*HealthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HealthReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_CreateHost0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateHostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceCreateHost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateHost(ctx, req.(*CreateHostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateHostReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_UpdateHost0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateHostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceUpdateHost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateHost(ctx, req.(*UpdateHostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateHostReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_OverwriteHost0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OverwriteHostRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceOverwriteHost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OverwriteHost(ctx, req.(*OverwriteHostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OverwriteHostReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_DeleteHost0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteHostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceDeleteHost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteHost(ctx, req.(*DeleteHostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteHostReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_GetHost0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetHostRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceGetHost)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHost(ctx, req.(*GetHostRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetHostReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_GetHosts0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetHostsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceGetHosts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHosts(ctx, req.(*GetHostsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetHostsReply)
		return ctx.Result(200, reply)
	}
}

type ResourceHTTPClient interface {
	CreateHost(ctx context.Context, req *CreateHostRequest, opts ...http.CallOption) (rsp *CreateHostReply, err error)
	DeleteHost(ctx context.Context, req *DeleteHostRequest, opts ...http.CallOption) (rsp *DeleteHostReply, err error)
	GetHost(ctx context.Context, req *GetHostRequest, opts ...http.CallOption) (rsp *GetHostReply, err error)
	GetHosts(ctx context.Context, req *GetHostsRequest, opts ...http.CallOption) (rsp *GetHostsReply, err error)
	HealthCheck(ctx context.Context, req *HealthRequest, opts ...http.CallOption) (rsp *HealthReply, err error)
	OverwriteHost(ctx context.Context, req *OverwriteHostRequest, opts ...http.CallOption) (rsp *OverwriteHostReply, err error)
	UpdateHost(ctx context.Context, req *UpdateHostRequest, opts ...http.CallOption) (rsp *UpdateHostReply, err error)
}

type ResourceHTTPClientImpl struct {
	cc *http.Client
}

func NewResourceHTTPClient(client *http.Client) ResourceHTTPClient {
	return &ResourceHTTPClientImpl{client}
}

func (c *ResourceHTTPClientImpl) CreateHost(ctx context.Context, in *CreateHostRequest, opts ...http.CallOption) (*CreateHostReply, error) {
	var out CreateHostReply
	pattern := "/api/v1/hosts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceCreateHost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ResourceHTTPClientImpl) DeleteHost(ctx context.Context, in *DeleteHostRequest, opts ...http.CallOption) (*DeleteHostReply, error) {
	var out DeleteHostReply
	pattern := "/api/v1/hosts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationResourceDeleteHost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ResourceHTTPClientImpl) GetHost(ctx context.Context, in *GetHostRequest, opts ...http.CallOption) (*GetHostReply, error) {
	var out GetHostReply
	pattern := "/api/v1/hosts/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationResourceGetHost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ResourceHTTPClientImpl) GetHosts(ctx context.Context, in *GetHostsRequest, opts ...http.CallOption) (*GetHostsReply, error) {
	var out GetHostsReply
	pattern := "/api/v1/hosts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationResourceGetHosts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ResourceHTTPClientImpl) HealthCheck(ctx context.Context, in *HealthRequest, opts ...http.CallOption) (*HealthReply, error) {
	var out HealthReply
	pattern := "/api/v1/resource/health"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationResourceHealthCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ResourceHTTPClientImpl) OverwriteHost(ctx context.Context, in *OverwriteHostRequest, opts ...http.CallOption) (*OverwriteHostReply, error) {
	var out OverwriteHostReply
	pattern := "/api/v1/hosts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceOverwriteHost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ResourceHTTPClientImpl) UpdateHost(ctx context.Context, in *UpdateHostRequest, opts ...http.CallOption) (*UpdateHostReply, error) {
	var out UpdateHostReply
	pattern := "/api/v1/hosts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceUpdateHost))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: api/task/v1/subtask.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateSubtaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId              string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Status              bool   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	DetectionType       int32  `protobuf:"varint,3,opt,name=detection_type,json=detectionType,proto3" json:"detection_type,omitempty"`
	Params              string `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
	SrcEpFilterStrategy string `protobuf:"bytes,5,opt,name=src_ep_filter_strategy,json=srcEpFilterStrategy,proto3" json:"src_ep_filter_strategy,omitempty"`
	SrcEpSelStrategy    string `protobuf:"bytes,6,opt,name=src_ep_sel_strategy,json=srcEpSelStrategy,proto3" json:"src_ep_sel_strategy,omitempty"`
	SrcEpSelNum         int32  `protobuf:"varint,7,opt,name=src_ep_sel_num,json=srcEpSelNum,proto3" json:"src_ep_sel_num,omitempty"`
	DstEpFilterStrategy string `protobuf:"bytes,8,opt,name=dst_ep_filter_strategy,json=dstEpFilterStrategy,proto3" json:"dst_ep_filter_strategy,omitempty"`
	DstEpSelStrategy    string `protobuf:"bytes,9,opt,name=dst_ep_sel_strategy,json=dstEpSelStrategy,proto3" json:"dst_ep_sel_strategy,omitempty"`
	DstEpSelNum         int32  `protobuf:"varint,10,opt,name=dst_ep_sel_num,json=dstEpSelNum,proto3" json:"dst_ep_sel_num,omitempty"`
}

func (x *CreateSubtaskRequest) Reset() {
	*x = CreateSubtaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_task_v1_subtask_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubtaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubtaskRequest) ProtoMessage() {}

func (x *CreateSubtaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_subtask_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubtaskRequest.ProtoReflect.Descriptor instead.
func (*CreateSubtaskRequest) Descriptor() ([]byte, []int) {
	return file_api_task_v1_subtask_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSubtaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *CreateSubtaskRequest) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *CreateSubtaskRequest) GetDetectionType() int32 {
	if x != nil {
		return x.DetectionType
	}
	return 0
}

func (x *CreateSubtaskRequest) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *CreateSubtaskRequest) GetSrcEpFilterStrategy() string {
	if x != nil {
		return x.SrcEpFilterStrategy
	}
	return ""
}

func (x *CreateSubtaskRequest) GetSrcEpSelStrategy() string {
	if x != nil {
		return x.SrcEpSelStrategy
	}
	return ""
}

func (x *CreateSubtaskRequest) GetSrcEpSelNum() int32 {
	if x != nil {
		return x.SrcEpSelNum
	}
	return 0
}

func (x *CreateSubtaskRequest) GetDstEpFilterStrategy() string {
	if x != nil {
		return x.DstEpFilterStrategy
	}
	return ""
}

func (x *CreateSubtaskRequest) GetDstEpSelStrategy() string {
	if x != nil {
		return x.DstEpSelStrategy
	}
	return ""
}

func (x *CreateSubtaskRequest) GetDstEpSelNum() int32 {
	if x != nil {
		return x.DstEpSelNum
	}
	return 0
}

type CreateSubtaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubtaskId string `protobuf:"bytes,1,opt,name=subtask_id,json=subtaskId,proto3" json:"subtask_id,omitempty"`
}

func (x *CreateSubtaskReply) Reset() {
	*x = CreateSubtaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_task_v1_subtask_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubtaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubtaskReply) ProtoMessage() {}

func (x *CreateSubtaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_subtask_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubtaskReply.ProtoReflect.Descriptor instead.
func (*CreateSubtaskReply) Descriptor() ([]byte, []int) {
	return file_api_task_v1_subtask_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSubtaskReply) GetSubtaskId() string {
	if x != nil {
		return x.SubtaskId
	}
	return ""
}

type UpdateSubtaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId              string  `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SubtaskId           string  `protobuf:"bytes,2,opt,name=subtask_id,json=subtaskId,proto3" json:"subtask_id,omitempty"`
	Status              *bool   `protobuf:"varint,3,opt,name=status,proto3,oneof" json:"status,omitempty"`
	DetectionType       *int32  `protobuf:"varint,4,opt,name=detection_type,json=detectionType,proto3,oneof" json:"detection_type,omitempty"`
	Params              *string `protobuf:"bytes,5,opt,name=params,proto3,oneof" json:"params,omitempty"`
	SrcEpFilterStrategy *string `protobuf:"bytes,6,opt,name=src_ep_filter_strategy,json=srcEpFilterStrategy,proto3,oneof" json:"src_ep_filter_strategy,omitempty"`
	SrcEpSelStrategy    *string `protobuf:"bytes,7,opt,name=src_ep_sel_strategy,json=srcEpSelStrategy,proto3,oneof" json:"src_ep_sel_strategy,omitempty"`
	SrcEpSelNum         *int32  `protobuf:"varint,8,opt,name=src_ep_sel_num,json=srcEpSelNum,proto3,oneof" json:"src_ep_sel_num,omitempty"`
	DstEpFilterStrategy *string `protobuf:"bytes,9,opt,name=dst_ep_filter_strategy,json=dstEpFilterStrategy,proto3,oneof" json:"dst_ep_filter_strategy,omitempty"`
	DstEpSelStrategy    *string `protobuf:"bytes,10,opt,name=dst_ep_sel_strategy,json=dstEpSelStrategy,proto3,oneof" json:"dst_ep_sel_strategy,omitempty"`
	DstEpSelNum         *int32  `protobuf:"varint,11,opt,name=dst_ep_sel_num,json=dstEpSelNum,proto3,oneof" json:"dst_ep_sel_num,omitempty"`
}

func (x *UpdateSubtaskRequest) Reset() {
	*x = UpdateSubtaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_task_v1_subtask_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubtaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubtaskRequest) ProtoMessage() {}

func (x *UpdateSubtaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_subtask_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubtaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubtaskRequest) Descriptor() ([]byte, []int) {
	return file_api_task_v1_subtask_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateSubtaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *UpdateSubtaskRequest) GetSubtaskId() string {
	if x != nil {
		return x.SubtaskId
	}
	return ""
}

func (x *UpdateSubtaskRequest) GetStatus() bool {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return false
}

func (x *UpdateSubtaskRequest) GetDetectionType() int32 {
	if x != nil && x.DetectionType != nil {
		return *x.DetectionType
	}
	return 0
}

func (x *UpdateSubtaskRequest) GetParams() string {
	if x != nil && x.Params != nil {
		return *x.Params
	}
	return ""
}

func (x *UpdateSubtaskRequest) GetSrcEpFilterStrategy() string {
	if x != nil && x.SrcEpFilterStrategy != nil {
		return *x.SrcEpFilterStrategy
	}
	return ""
}

func (x *UpdateSubtaskRequest) GetSrcEpSelStrategy() string {
	if x != nil && x.SrcEpSelStrategy != nil {
		return *x.SrcEpSelStrategy
	}
	return ""
}

func (x *UpdateSubtaskRequest) GetSrcEpSelNum() int32 {
	if x != nil && x.SrcEpSelNum != nil {
		return *x.SrcEpSelNum
	}
	return 0
}

func (x *UpdateSubtaskRequest) GetDstEpFilterStrategy() string {
	if x != nil && x.DstEpFilterStrategy != nil {
		return *x.DstEpFilterStrategy
	}
	return ""
}

func (x *UpdateSubtaskRequest) GetDstEpSelStrategy() string {
	if x != nil && x.DstEpSelStrategy != nil {
		return *x.DstEpSelStrategy
	}
	return ""
}

func (x *UpdateSubtaskRequest) GetDstEpSelNum() int32 {
	if x != nil && x.DstEpSelNum != nil {
		return *x.DstEpSelNum
	}
	return 0
}

type UpdateSubtaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowsAffected uint32 `protobuf:"varint,1,opt,name=rows_affected,json=rowsAffected,proto3" json:"rows_affected,omitempty"`
}

func (x *UpdateSubtaskReply) Reset() {
	*x = UpdateSubtaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_task_v1_subtask_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubtaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubtaskReply) ProtoMessage() {}

func (x *UpdateSubtaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_subtask_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubtaskReply.ProtoReflect.Descriptor instead.
func (*UpdateSubtaskReply) Descriptor() ([]byte, []int) {
	return file_api_task_v1_subtask_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateSubtaskReply) GetRowsAffected() uint32 {
	if x != nil {
		return x.RowsAffected
	}
	return 0
}

type OverwriteSubtaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId              string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SubtaskId           string `protobuf:"bytes,2,opt,name=subtask_id,json=subtaskId,proto3" json:"subtask_id,omitempty"`
	Status              bool   `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	DetectionType       int32  `protobuf:"varint,4,opt,name=detection_type,json=detectionType,proto3" json:"detection_type,omitempty"`
	Params              string `protobuf:"bytes,5,opt,name=params,proto3" json:"params,omitempty"`
	SrcEpFilterStrategy string `protobuf:"bytes,6,opt,name=src_ep_filter_strategy,json=srcEpFilterStrategy,proto3" json:"src_ep_filter_strategy,omitempty"`
	SrcEpSelStrategy    string `protobuf:"bytes,7,opt,name=src_ep_sel_strategy,json=srcEpSelStrategy,proto3" json:"src_ep_sel_strategy,omitempty"`
	SrcEpSelNum         int32  `protobuf:"varint,8,opt,name=src_ep_sel_num,json=srcEpSelNum,proto3" json:"src_ep_sel_num,omitempty"`
	DstEpFilterStrategy string `protobuf:"bytes,9,opt,name=dst_ep_filter_strategy,json=dstEpFilterStrategy,proto3" json:"dst_ep_filter_strategy,omitempty"`
	DstEpSelStrategy    string `protobuf:"bytes,10,opt,name=dst_ep_sel_strategy,json=dstEpSelStrategy,proto3" json:"dst_ep_sel_strategy,omitempty"`
	DstEpSelNum         int32  `protobuf:"varint,11,opt,name=dst_ep_sel_num,json=dstEpSelNum,proto3" json:"dst_ep_sel_num,omitempty"`
}

func (x *OverwriteSubtaskRequest) Reset() {
	*x = OverwriteSubtaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_task_v1_subtask_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverwriteSubtaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverwriteSubtaskRequest) ProtoMessage() {}

func (x *OverwriteSubtaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_subtask_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverwriteSubtaskRequest.ProtoReflect.Descriptor instead.
func (*OverwriteSubtaskRequest) Descriptor() ([]byte, []int) {
	return file_api_task_v1_subtask_proto_rawDescGZIP(), []int{4}
}

func (x *OverwriteSubtaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *OverwriteSubtaskRequest) GetSubtaskId() string {
	if x != nil {
		return x.SubtaskId
	}
	return ""
}

func (x *OverwriteSubtaskRequest) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *OverwriteSubtaskRequest) GetDetectionType() int32 {
	if x != nil {
		return x.DetectionType
	}
	return 0
}

func (x *OverwriteSubtaskRequest) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *OverwriteSubtaskRequest) GetSrcEpFilterStrategy() string {
	if x != nil {
		return x.SrcEpFilterStrategy
	}
	return ""
}

func (x *OverwriteSubtaskRequest) GetSrcEpSelStrategy() string {
	if x != nil {
		return x.SrcEpSelStrategy
	}
	return ""
}

func (x *OverwriteSubtaskRequest) GetSrcEpSelNum() int32 {
	if x != nil {
		return x.SrcEpSelNum
	}
	return 0
}

func (x *OverwriteSubtaskRequest) GetDstEpFilterStrategy() string {
	if x != nil {
		return x.DstEpFilterStrategy
	}
	return ""
}

func (x *OverwriteSubtaskRequest) GetDstEpSelStrategy() string {
	if x != nil {
		return x.DstEpSelStrategy
	}
	return ""
}

func (x *OverwriteSubtaskRequest) GetDstEpSelNum() int32 {
	if x != nil {
		return x.DstEpSelNum
	}
	return 0
}

type OverwriteSubtaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowsAffected uint32 `protobuf:"varint,1,opt,name=rows_affected,json=rowsAffected,proto3" json:"rows_affected,omitempty"`
}

func (x *OverwriteSubtaskReply) Reset() {
	*x = OverwriteSubtaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_task_v1_subtask_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverwriteSubtaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverwriteSubtaskReply) ProtoMessage() {}

func (x *OverwriteSubtaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_subtask_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverwriteSubtaskReply.ProtoReflect.Descriptor instead.
func (*OverwriteSubtaskReply) Descriptor() ([]byte, []int) {
	return file_api_task_v1_subtask_proto_rawDescGZIP(), []int{5}
}

func (x *OverwriteSubtaskReply) GetRowsAffected() uint32 {
	if x != nil {
		return x.RowsAffected
	}
	return 0
}

type DeleteSubtaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId    string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SubtaskId string `protobuf:"bytes,2,opt,name=subtask_id,json=subtaskId,proto3" json:"subtask_id,omitempty"`
}

func (x *DeleteSubtaskRequest) Reset() {
	*x = DeleteSubtaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_task_v1_subtask_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubtaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubtaskRequest) ProtoMessage() {}

func (x *DeleteSubtaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_subtask_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubtaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubtaskRequest) Descriptor() ([]byte, []int) {
	return file_api_task_v1_subtask_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteSubtaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DeleteSubtaskRequest) GetSubtaskId() string {
	if x != nil {
		return x.SubtaskId
	}
	return ""
}

type DeleteSubtaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowsAffected uint32 `protobuf:"varint,1,opt,name=rows_affected,json=rowsAffected,proto3" json:"rows_affected,omitempty"`
}

func (x *DeleteSubtaskReply) Reset() {
	*x = DeleteSubtaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_task_v1_subtask_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubtaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubtaskReply) ProtoMessage() {}

func (x *DeleteSubtaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_subtask_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubtaskReply.ProtoReflect.Descriptor instead.
func (*DeleteSubtaskReply) Descriptor() ([]byte, []int) {
	return file_api_task_v1_subtask_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteSubtaskReply) GetRowsAffected() uint32 {
	if x != nil {
		return x.RowsAffected
	}
	return 0
}

type GetSubtaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId    string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SubtaskId string `protobuf:"bytes,2,opt,name=subtask_id,json=subtaskId,proto3" json:"subtask_id,omitempty"`
}

func (x *GetSubtaskRequest) Reset() {
	*x = GetSubtaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_task_v1_subtask_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubtaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubtaskRequest) ProtoMessage() {}

func (x *GetSubtaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_subtask_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubtaskRequest.ProtoReflect.Descriptor instead.
func (*GetSubtaskRequest) Descriptor() ([]byte, []int) {
	return file_api_task_v1_subtask_proto_rawDescGZIP(), []int{8}
}

func (x *GetSubtaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetSubtaskRequest) GetSubtaskId() string {
	if x != nil {
		return x.SubtaskId
	}
	return ""
}

type GetSubtaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubtaskId           string `protobuf:"bytes,1,opt,name=subtask_id,json=subtaskId,proto3" json:"subtask_id,omitempty"`
	Status              bool   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	DetectionType       int32  `protobuf:"varint,3,opt,name=detection_type,json=detectionType,proto3" json:"detection_type,omitempty"`
	Params              string `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
	SrcEpFilterStrategy string `protobuf:"bytes,5,opt,name=src_ep_filter_strategy,json=srcEpFilterStrategy,proto3" json:"src_ep_filter_strategy,omitempty"`
	SrcEpSelStrategy    string `protobuf:"bytes,6,opt,name=src_ep_sel_strategy,json=srcEpSelStrategy,proto3" json:"src_ep_sel_strategy,omitempty"`
	SrcEpSelNum         int32  `protobuf:"varint,7,opt,name=src_ep_sel_num,json=srcEpSelNum,proto3" json:"src_ep_sel_num,omitempty"`
	DstEpFilterStrategy string `protobuf:"bytes,8,opt,name=dst_ep_filter_strategy,json=dstEpFilterStrategy,proto3" json:"dst_ep_filter_strategy,omitempty"`
	DstEpSelStrategy    string `protobuf:"bytes,9,opt,name=dst_ep_sel_strategy,json=dstEpSelStrategy,proto3" json:"dst_ep_sel_strategy,omitempty"`
	DstEpSelNum         int32  `protobuf:"varint,10,opt,name=dst_ep_sel_num,json=dstEpSelNum,proto3" json:"dst_ep_sel_num,omitempty"`
	UpdatedBy           string `protobuf:"bytes,11,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	CreatedBy           string `protobuf:"bytes,12,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedAt           string `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt           string `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *GetSubtaskReply) Reset() {
	*x = GetSubtaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_task_v1_subtask_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubtaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubtaskReply) ProtoMessage() {}

func (x *GetSubtaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_subtask_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubtaskReply.ProtoReflect.Descriptor instead.
func (*GetSubtaskReply) Descriptor() ([]byte, []int) {
	return file_api_task_v1_subtask_proto_rawDescGZIP(), []int{9}
}

func (x *GetSubtaskReply) GetSubtaskId() string {
	if x != nil {
		return x.SubtaskId
	}
	return ""
}

func (x *GetSubtaskReply) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *GetSubtaskReply) GetDetectionType() int32 {
	if x != nil {
		return x.DetectionType
	}
	return 0
}

func (x *GetSubtaskReply) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *GetSubtaskReply) GetSrcEpFilterStrategy() string {
	if x != nil {
		return x.SrcEpFilterStrategy
	}
	return ""
}

func (x *GetSubtaskReply) GetSrcEpSelStrategy() string {
	if x != nil {
		return x.SrcEpSelStrategy
	}
	return ""
}

func (x *GetSubtaskReply) GetSrcEpSelNum() int32 {
	if x != nil {
		return x.SrcEpSelNum
	}
	return 0
}

func (x *GetSubtaskReply) GetDstEpFilterStrategy() string {
	if x != nil {
		return x.DstEpFilterStrategy
	}
	return ""
}

func (x *GetSubtaskReply) GetDstEpSelStrategy() string {
	if x != nil {
		return x.DstEpSelStrategy
	}
	return ""
}

func (x *GetSubtaskReply) GetDstEpSelNum() int32 {
	if x != nil {
		return x.DstEpSelNum
	}
	return 0
}

func (x *GetSubtaskReply) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *GetSubtaskReply) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *GetSubtaskReply) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetSubtaskReply) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type SingleSubtask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubtaskId           string `protobuf:"bytes,1,opt,name=subtask_id,json=subtaskId,proto3" json:"subtask_id,omitempty"`
	Status              bool   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	DetectionType       int32  `protobuf:"varint,3,opt,name=detection_type,json=detectionType,proto3" json:"detection_type,omitempty"`
	Params              string `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
	SrcEpFilterStrategy string `protobuf:"bytes,5,opt,name=src_ep_filter_strategy,json=srcEpFilterStrategy,proto3" json:"src_ep_filter_strategy,omitempty"`
	SrcEpSelStrategy    string `protobuf:"bytes,6,opt,name=src_ep_sel_strategy,json=srcEpSelStrategy,proto3" json:"src_ep_sel_strategy,omitempty"`
	SrcEpSelNum         int32  `protobuf:"varint,7,opt,name=src_ep_sel_num,json=srcEpSelNum,proto3" json:"src_ep_sel_num,omitempty"`
	DstEpFilterStrategy string `protobuf:"bytes,8,opt,name=dst_ep_filter_strategy,json=dstEpFilterStrategy,proto3" json:"dst_ep_filter_strategy,omitempty"`
	DstEpSelStrategy    string `protobuf:"bytes,9,opt,name=dst_ep_sel_strategy,json=dstEpSelStrategy,proto3" json:"dst_ep_sel_strategy,omitempty"`
	DstEpSelNum         int32  `protobuf:"varint,10,opt,name=dst_ep_sel_num,json=dstEpSelNum,proto3" json:"dst_ep_sel_num,omitempty"`
	UpdatedBy           string `protobuf:"bytes,11,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	CreatedBy           string `protobuf:"bytes,12,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedAt           string `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt           string `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *SingleSubtask) Reset() {
	*x = SingleSubtask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_task_v1_subtask_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleSubtask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleSubtask) ProtoMessage() {}

func (x *SingleSubtask) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_subtask_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleSubtask.ProtoReflect.Descriptor instead.
func (*SingleSubtask) Descriptor() ([]byte, []int) {
	return file_api_task_v1_subtask_proto_rawDescGZIP(), []int{10}
}

func (x *SingleSubtask) GetSubtaskId() string {
	if x != nil {
		return x.SubtaskId
	}
	return ""
}

func (x *SingleSubtask) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *SingleSubtask) GetDetectionType() int32 {
	if x != nil {
		return x.DetectionType
	}
	return 0
}

func (x *SingleSubtask) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *SingleSubtask) GetSrcEpFilterStrategy() string {
	if x != nil {
		return x.SrcEpFilterStrategy
	}
	return ""
}

func (x *SingleSubtask) GetSrcEpSelStrategy() string {
	if x != nil {
		return x.SrcEpSelStrategy
	}
	return ""
}

func (x *SingleSubtask) GetSrcEpSelNum() int32 {
	if x != nil {
		return x.SrcEpSelNum
	}
	return 0
}

func (x *SingleSubtask) GetDstEpFilterStrategy() string {
	if x != nil {
		return x.DstEpFilterStrategy
	}
	return ""
}

func (x *SingleSubtask) GetDstEpSelStrategy() string {
	if x != nil {
		return x.DstEpSelStrategy
	}
	return ""
}

func (x *SingleSubtask) GetDstEpSelNum() int32 {
	if x != nil {
		return x.DstEpSelNum
	}
	return 0
}

func (x *SingleSubtask) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *SingleSubtask) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *SingleSubtask) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *SingleSubtask) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type GetSubtasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *GetSubtasksRequest) Reset() {
	*x = GetSubtasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_task_v1_subtask_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubtasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubtasksRequest) ProtoMessage() {}

func (x *GetSubtasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_subtask_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubtasksRequest.ProtoReflect.Descriptor instead.
func (*GetSubtasksRequest) Descriptor() ([]byte, []int) {
	return file_api_task_v1_subtask_proto_rawDescGZIP(), []int{11}
}

func (x *GetSubtasksRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetSubtasksReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subtasks []*SingleSubtask `protobuf:"bytes,1,rep,name=subtasks,proto3" json:"subtasks,omitempty"`
}

func (x *GetSubtasksReply) Reset() {
	*x = GetSubtasksReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_task_v1_subtask_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubtasksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubtasksReply) ProtoMessage() {}

func (x *GetSubtasksReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_subtask_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubtasksReply.ProtoReflect.Descriptor instead.
func (*GetSubtasksReply) Descriptor() ([]byte, []int) {
	return file_api_task_v1_subtask_proto_rawDescGZIP(), []int{12}
}

func (x *GetSubtasksReply) GetSubtasks() []*SingleSubtask {
	if x != nil {
		return x.Subtasks
	}
	return nil
}

var File_api_task_v1_subtask_proto protoreflect.FileDescriptor

var file_api_task_v1_subtask_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x03, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x33, 0x0a, 0x16, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x72, 0x63, 0x45, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x70, 0x5f, 0x73,
	0x65, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x72, 0x63, 0x45, 0x70, 0x53, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x23, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x70, 0x5f, 0x73, 0x65,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x72, 0x63,
	0x45, 0x70, 0x53, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x73, 0x74, 0x5f,
	0x65, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x73, 0x74, 0x45, 0x70, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2d, 0x0a,
	0x13, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x73, 0x74, 0x45,
	0x70, 0x53, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x23, 0x0a, 0x0e,
	0x64, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x45, 0x70, 0x53, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x22, 0x33, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x99, 0x05, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0d,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a,
	0x16, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x13, 0x73, 0x72, 0x63, 0x45, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x73, 0x72, 0x63, 0x5f, 0x65,
	0x70, 0x5f, 0x73, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10, 0x73, 0x72, 0x63, 0x45, 0x70, 0x53, 0x65, 0x6c,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x73,
	0x72, 0x63, 0x5f, 0x65, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x45, 0x70, 0x53, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x13, 0x64, 0x73, 0x74, 0x45, 0x70, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x13, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x10,
	0x64, 0x73, 0x74, 0x45, 0x70, 0x53, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x5f, 0x73, 0x65,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x0b, 0x64,
	0x73, 0x74, 0x45, 0x70, 0x53, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x65,
	0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x70, 0x5f, 0x73, 0x65, 0x6c,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x65, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x73, 0x74, 0x5f,
	0x65, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x22, 0x39, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x77, 0x73,
	0x5f, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xba, 0x03,
	0x0a, 0x17, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x72, 0x63, 0x5f,
	0x65, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x72, 0x63, 0x45, 0x70, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2d, 0x0a,
	0x13, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x72, 0x63, 0x45,
	0x70, 0x53, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x23, 0x0a, 0x0e,
	0x73, 0x72, 0x63, 0x5f, 0x65, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x45, 0x70, 0x53, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x64, 0x73, 0x74, 0x45, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x70,
	0x5f, 0x73, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x73, 0x74, 0x45, 0x70, 0x53, 0x65, 0x6c, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x23, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x5f,
	0x73, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64,
	0x73, 0x74, 0x45, 0x70, 0x53, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0x3c, 0x0a, 0x15, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x61, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x6f, 0x77, 0x73,
	0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x4e, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x22, 0x4b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0x95, 0x04, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x72,
	0x63, 0x5f, 0x65, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x72, 0x63, 0x45,
	0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x2d, 0x0a, 0x13, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x72,
	0x63, 0x45, 0x70, 0x53, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x23,
	0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x45, 0x70, 0x53, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x73, 0x74, 0x45, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x73, 0x74, 0x5f,
	0x65, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x73, 0x74, 0x45, 0x70, 0x53, 0x65, 0x6c, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x23, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x5f, 0x65,
	0x70, 0x5f, 0x73, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x64, 0x73, 0x74, 0x45, 0x70, 0x53, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x93, 0x04, 0x0a, 0x0d, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x33, 0x0a, 0x16, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x73, 0x72, 0x63, 0x45, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x70, 0x5f,
	0x73, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x72, 0x63, 0x45, 0x70, 0x53, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x23, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x65, 0x70, 0x5f, 0x73,
	0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x72,
	0x63, 0x45, 0x70, 0x53, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x73, 0x74,
	0x5f, 0x65, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x73, 0x74, 0x45, 0x70,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2d,
	0x0a, 0x13, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x73, 0x74,
	0x45, 0x70, 0x53, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x23, 0x0a,
	0x0e, 0x64, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x45, 0x70, 0x53, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x2d,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x4a, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x32, 0xa5, 0x06, 0x0a, 0x07, 0x53, 0x75,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x7c, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2e, 0x3a, 0x01, 0x2a, 0x1a, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f,
	0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0x92, 0x01, 0x0a, 0x10, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x74, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x75, 0x62, 0x74,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x34,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x32, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73,
	0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0x86, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x74, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x2a, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x2f, 0x7b, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x7d, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f,
	0x7b, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x73, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x42, 0x29, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31,
	0x50, 0x01, 0x5a, 0x18, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x2d, 0x62, 0x61, 0x74, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_task_v1_subtask_proto_rawDescOnce sync.Once
	file_api_task_v1_subtask_proto_rawDescData = file_api_task_v1_subtask_proto_rawDesc
)

func file_api_task_v1_subtask_proto_rawDescGZIP() []byte {
	file_api_task_v1_subtask_proto_rawDescOnce.Do(func() {
		file_api_task_v1_subtask_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_task_v1_subtask_proto_rawDescData)
	})
	return file_api_task_v1_subtask_proto_rawDescData
}

var file_api_task_v1_subtask_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_api_task_v1_subtask_proto_goTypes = []any{
	(*CreateSubtaskRequest)(nil),    // 0: api.task.v1.CreateSubtaskRequest
	(*CreateSubtaskReply)(nil),      // 1: api.task.v1.CreateSubtaskReply
	(*UpdateSubtaskRequest)(nil),    // 2: api.task.v1.UpdateSubtaskRequest
	(*UpdateSubtaskReply)(nil),      // 3: api.task.v1.UpdateSubtaskReply
	(*OverwriteSubtaskRequest)(nil), // 4: api.task.v1.OverwriteSubtaskRequest
	(*OverwriteSubtaskReply)(nil),   // 5: api.task.v1.OverwriteSubtaskReply
	(*DeleteSubtaskRequest)(nil),    // 6: api.task.v1.DeleteSubtaskRequest
	(*DeleteSubtaskReply)(nil),      // 7: api.task.v1.DeleteSubtaskReply
	(*GetSubtaskRequest)(nil),       // 8: api.task.v1.GetSubtaskRequest
	(*GetSubtaskReply)(nil),         // 9: api.task.v1.GetSubtaskReply
	(*SingleSubtask)(nil),           // 10: api.task.v1.SingleSubtask
	(*GetSubtasksRequest)(nil),      // 11: api.task.v1.GetSubtasksRequest
	(*GetSubtasksReply)(nil),        // 12: api.task.v1.GetSubtasksReply
}
var file_api_task_v1_subtask_proto_depIdxs = []int32{
	10, // 0: api.task.v1.GetSubtasksReply.subtasks:type_name -> api.task.v1.SingleSubtask
	0,  // 1: api.task.v1.Subtask.CreateSubtask:input_type -> api.task.v1.CreateSubtaskRequest
	2,  // 2: api.task.v1.Subtask.UpdateSubtask:input_type -> api.task.v1.UpdateSubtaskRequest
	4,  // 3: api.task.v1.Subtask.OverwriteSubtask:input_type -> api.task.v1.OverwriteSubtaskRequest
	6,  // 4: api.task.v1.Subtask.DeleteSubtask:input_type -> api.task.v1.DeleteSubtaskRequest
	8,  // 5: api.task.v1.Subtask.GetSubtask:input_type -> api.task.v1.GetSubtaskRequest
	11, // 6: api.task.v1.Subtask.GetSubtasks:input_type -> api.task.v1.GetSubtasksRequest
	1,  // 7: api.task.v1.Subtask.CreateSubtask:output_type -> api.task.v1.CreateSubtaskReply
	3,  // 8: api.task.v1.Subtask.UpdateSubtask:output_type -> api.task.v1.UpdateSubtaskReply
	5,  // 9: api.task.v1.Subtask.OverwriteSubtask:output_type -> api.task.v1.OverwriteSubtaskReply
	7,  // 10: api.task.v1.Subtask.DeleteSubtask:output_type -> api.task.v1.DeleteSubtaskReply
	9,  // 11: api.task.v1.Subtask.GetSubtask:output_type -> api.task.v1.GetSubtaskReply
	12, // 12: api.task.v1.Subtask.GetSubtasks:output_type -> api.task.v1.GetSubtasksReply
	7,  // [7:13] is the sub-list for method output_type
	1,  // [1:7] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_api_task_v1_subtask_proto_init() }
func file_api_task_v1_subtask_proto_init() {
	if File_api_task_v1_subtask_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_task_v1_subtask_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateSubtaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_task_v1_subtask_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateSubtaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_task_v1_subtask_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateSubtaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_task_v1_subtask_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateSubtaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_task_v1_subtask_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*OverwriteSubtaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_task_v1_subtask_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*OverwriteSubtaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_task_v1_subtask_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteSubtaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_task_v1_subtask_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteSubtaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_task_v1_subtask_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetSubtaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_task_v1_subtask_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetSubtaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_task_v1_subtask_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SingleSubtask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_task_v1_subtask_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetSubtasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_task_v1_subtask_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetSubtasksReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_task_v1_subtask_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_task_v1_subtask_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_task_v1_subtask_proto_goTypes,
		DependencyIndexes: file_api_task_v1_subtask_proto_depIdxs,
		MessageInfos:      file_api_task_v1_subtask_proto_msgTypes,
	}.Build()
	File_api_task_v1_subtask_proto = out.File
	file_api_task_v1_subtask_proto_rawDesc = nil
	file_api_task_v1_subtask_proto_goTypes = nil
	file_api_task_v1_subtask_proto_depIdxs = nil
}

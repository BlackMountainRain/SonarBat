// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/task/v1/subtask.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSubtaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubtaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubtaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubtaskRequestMultiError, or nil if none found.
func (m *CreateSubtaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubtaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for Status

	// no validation rules for DetectionType

	// no validation rules for Params

	// no validation rules for SrcEpFilterStrategy

	// no validation rules for SrcEpSelStrategy

	// no validation rules for SrcEpSelNum

	// no validation rules for DstEpFilterStrategy

	// no validation rules for DstEpSelStrategy

	// no validation rules for DstEpSelNum

	if len(errors) > 0 {
		return CreateSubtaskRequestMultiError(errors)
	}

	return nil
}

// CreateSubtaskRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSubtaskRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSubtaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubtaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubtaskRequestMultiError) AllErrors() []error { return m }

// CreateSubtaskRequestValidationError is the validation error returned by
// CreateSubtaskRequest.Validate if the designated constraints aren't met.
type CreateSubtaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubtaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubtaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubtaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubtaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubtaskRequestValidationError) ErrorName() string {
	return "CreateSubtaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubtaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubtaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubtaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubtaskRequestValidationError{}

// Validate checks the field values on CreateSubtaskReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubtaskReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubtaskReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubtaskReplyMultiError, or nil if none found.
func (m *CreateSubtaskReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubtaskReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubtaskId

	if len(errors) > 0 {
		return CreateSubtaskReplyMultiError(errors)
	}

	return nil
}

// CreateSubtaskReplyMultiError is an error wrapping multiple validation errors
// returned by CreateSubtaskReply.ValidateAll() if the designated constraints
// aren't met.
type CreateSubtaskReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubtaskReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubtaskReplyMultiError) AllErrors() []error { return m }

// CreateSubtaskReplyValidationError is the validation error returned by
// CreateSubtaskReply.Validate if the designated constraints aren't met.
type CreateSubtaskReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubtaskReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubtaskReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubtaskReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubtaskReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubtaskReplyValidationError) ErrorName() string {
	return "CreateSubtaskReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubtaskReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubtaskReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubtaskReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubtaskReplyValidationError{}

// Validate checks the field values on UpdateSubtaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubtaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubtaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubtaskRequestMultiError, or nil if none found.
func (m *UpdateSubtaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubtaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for SubtaskId

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.DetectionType != nil {
		// no validation rules for DetectionType
	}

	if m.Params != nil {
		// no validation rules for Params
	}

	if m.SrcEpFilterStrategy != nil {
		// no validation rules for SrcEpFilterStrategy
	}

	if m.SrcEpSelStrategy != nil {
		// no validation rules for SrcEpSelStrategy
	}

	if m.SrcEpSelNum != nil {
		// no validation rules for SrcEpSelNum
	}

	if m.DstEpFilterStrategy != nil {
		// no validation rules for DstEpFilterStrategy
	}

	if m.DstEpSelStrategy != nil {
		// no validation rules for DstEpSelStrategy
	}

	if m.DstEpSelNum != nil {
		// no validation rules for DstEpSelNum
	}

	if len(errors) > 0 {
		return UpdateSubtaskRequestMultiError(errors)
	}

	return nil
}

// UpdateSubtaskRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSubtaskRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSubtaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubtaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubtaskRequestMultiError) AllErrors() []error { return m }

// UpdateSubtaskRequestValidationError is the validation error returned by
// UpdateSubtaskRequest.Validate if the designated constraints aren't met.
type UpdateSubtaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubtaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubtaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubtaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubtaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubtaskRequestValidationError) ErrorName() string {
	return "UpdateSubtaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubtaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubtaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubtaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubtaskRequestValidationError{}

// Validate checks the field values on UpdateSubtaskReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubtaskReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubtaskReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubtaskReplyMultiError, or nil if none found.
func (m *UpdateSubtaskReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubtaskReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RowsAffected

	if len(errors) > 0 {
		return UpdateSubtaskReplyMultiError(errors)
	}

	return nil
}

// UpdateSubtaskReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateSubtaskReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateSubtaskReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubtaskReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubtaskReplyMultiError) AllErrors() []error { return m }

// UpdateSubtaskReplyValidationError is the validation error returned by
// UpdateSubtaskReply.Validate if the designated constraints aren't met.
type UpdateSubtaskReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubtaskReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubtaskReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubtaskReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubtaskReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubtaskReplyValidationError) ErrorName() string {
	return "UpdateSubtaskReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubtaskReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubtaskReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubtaskReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubtaskReplyValidationError{}

// Validate checks the field values on OverwriteSubtaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OverwriteSubtaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OverwriteSubtaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OverwriteSubtaskRequestMultiError, or nil if none found.
func (m *OverwriteSubtaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OverwriteSubtaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for SubtaskId

	// no validation rules for Status

	// no validation rules for DetectionType

	// no validation rules for Params

	// no validation rules for SrcEpFilterStrategy

	// no validation rules for SrcEpSelStrategy

	// no validation rules for SrcEpSelNum

	// no validation rules for DstEpFilterStrategy

	// no validation rules for DstEpSelStrategy

	// no validation rules for DstEpSelNum

	if len(errors) > 0 {
		return OverwriteSubtaskRequestMultiError(errors)
	}

	return nil
}

// OverwriteSubtaskRequestMultiError is an error wrapping multiple validation
// errors returned by OverwriteSubtaskRequest.ValidateAll() if the designated
// constraints aren't met.
type OverwriteSubtaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OverwriteSubtaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OverwriteSubtaskRequestMultiError) AllErrors() []error { return m }

// OverwriteSubtaskRequestValidationError is the validation error returned by
// OverwriteSubtaskRequest.Validate if the designated constraints aren't met.
type OverwriteSubtaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverwriteSubtaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverwriteSubtaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverwriteSubtaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverwriteSubtaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverwriteSubtaskRequestValidationError) ErrorName() string {
	return "OverwriteSubtaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OverwriteSubtaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOverwriteSubtaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverwriteSubtaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverwriteSubtaskRequestValidationError{}

// Validate checks the field values on OverwriteSubtaskReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OverwriteSubtaskReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OverwriteSubtaskReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OverwriteSubtaskReplyMultiError, or nil if none found.
func (m *OverwriteSubtaskReply) ValidateAll() error {
	return m.validate(true)
}

func (m *OverwriteSubtaskReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RowsAffected

	if len(errors) > 0 {
		return OverwriteSubtaskReplyMultiError(errors)
	}

	return nil
}

// OverwriteSubtaskReplyMultiError is an error wrapping multiple validation
// errors returned by OverwriteSubtaskReply.ValidateAll() if the designated
// constraints aren't met.
type OverwriteSubtaskReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OverwriteSubtaskReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OverwriteSubtaskReplyMultiError) AllErrors() []error { return m }

// OverwriteSubtaskReplyValidationError is the validation error returned by
// OverwriteSubtaskReply.Validate if the designated constraints aren't met.
type OverwriteSubtaskReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverwriteSubtaskReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverwriteSubtaskReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverwriteSubtaskReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverwriteSubtaskReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverwriteSubtaskReplyValidationError) ErrorName() string {
	return "OverwriteSubtaskReplyValidationError"
}

// Error satisfies the builtin error interface
func (e OverwriteSubtaskReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOverwriteSubtaskReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverwriteSubtaskReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverwriteSubtaskReplyValidationError{}

// Validate checks the field values on DeleteSubtaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSubtaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSubtaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSubtaskRequestMultiError, or nil if none found.
func (m *DeleteSubtaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSubtaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for SubtaskId

	if len(errors) > 0 {
		return DeleteSubtaskRequestMultiError(errors)
	}

	return nil
}

// DeleteSubtaskRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSubtaskRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSubtaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSubtaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSubtaskRequestMultiError) AllErrors() []error { return m }

// DeleteSubtaskRequestValidationError is the validation error returned by
// DeleteSubtaskRequest.Validate if the designated constraints aren't met.
type DeleteSubtaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubtaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubtaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubtaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubtaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubtaskRequestValidationError) ErrorName() string {
	return "DeleteSubtaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubtaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubtaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubtaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubtaskRequestValidationError{}

// Validate checks the field values on DeleteSubtaskReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSubtaskReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSubtaskReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSubtaskReplyMultiError, or nil if none found.
func (m *DeleteSubtaskReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSubtaskReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RowsAffected

	if len(errors) > 0 {
		return DeleteSubtaskReplyMultiError(errors)
	}

	return nil
}

// DeleteSubtaskReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteSubtaskReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteSubtaskReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSubtaskReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSubtaskReplyMultiError) AllErrors() []error { return m }

// DeleteSubtaskReplyValidationError is the validation error returned by
// DeleteSubtaskReply.Validate if the designated constraints aren't met.
type DeleteSubtaskReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubtaskReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubtaskReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubtaskReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubtaskReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubtaskReplyValidationError) ErrorName() string {
	return "DeleteSubtaskReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubtaskReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubtaskReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubtaskReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubtaskReplyValidationError{}

// Validate checks the field values on GetSubtaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSubtaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubtaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubtaskRequestMultiError, or nil if none found.
func (m *GetSubtaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubtaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for SubtaskId

	if len(errors) > 0 {
		return GetSubtaskRequestMultiError(errors)
	}

	return nil
}

// GetSubtaskRequestMultiError is an error wrapping multiple validation errors
// returned by GetSubtaskRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSubtaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubtaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubtaskRequestMultiError) AllErrors() []error { return m }

// GetSubtaskRequestValidationError is the validation error returned by
// GetSubtaskRequest.Validate if the designated constraints aren't met.
type GetSubtaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubtaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubtaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubtaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubtaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubtaskRequestValidationError) ErrorName() string {
	return "GetSubtaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubtaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubtaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubtaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubtaskRequestValidationError{}

// Validate checks the field values on GetSubtaskReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSubtaskReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubtaskReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubtaskReplyMultiError, or nil if none found.
func (m *GetSubtaskReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubtaskReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubtaskId

	// no validation rules for Status

	// no validation rules for DetectionType

	// no validation rules for Params

	// no validation rules for SrcEpFilterStrategy

	// no validation rules for SrcEpSelStrategy

	// no validation rules for SrcEpSelNum

	// no validation rules for DstEpFilterStrategy

	// no validation rules for DstEpSelStrategy

	// no validation rules for DstEpSelNum

	// no validation rules for UpdatedBy

	// no validation rules for CreatedBy

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetSubtaskReplyMultiError(errors)
	}

	return nil
}

// GetSubtaskReplyMultiError is an error wrapping multiple validation errors
// returned by GetSubtaskReply.ValidateAll() if the designated constraints
// aren't met.
type GetSubtaskReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubtaskReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubtaskReplyMultiError) AllErrors() []error { return m }

// GetSubtaskReplyValidationError is the validation error returned by
// GetSubtaskReply.Validate if the designated constraints aren't met.
type GetSubtaskReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubtaskReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubtaskReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubtaskReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubtaskReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubtaskReplyValidationError) ErrorName() string { return "GetSubtaskReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetSubtaskReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubtaskReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubtaskReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubtaskReplyValidationError{}

// Validate checks the field values on SingleSubtask with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SingleSubtask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingleSubtask with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SingleSubtaskMultiError, or
// nil if none found.
func (m *SingleSubtask) ValidateAll() error {
	return m.validate(true)
}

func (m *SingleSubtask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubtaskId

	// no validation rules for Status

	// no validation rules for DetectionType

	// no validation rules for Params

	// no validation rules for SrcEpFilterStrategy

	// no validation rules for SrcEpSelStrategy

	// no validation rules for SrcEpSelNum

	// no validation rules for DstEpFilterStrategy

	// no validation rules for DstEpSelStrategy

	// no validation rules for DstEpSelNum

	// no validation rules for UpdatedBy

	// no validation rules for CreatedBy

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return SingleSubtaskMultiError(errors)
	}

	return nil
}

// SingleSubtaskMultiError is an error wrapping multiple validation errors
// returned by SingleSubtask.ValidateAll() if the designated constraints
// aren't met.
type SingleSubtaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingleSubtaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingleSubtaskMultiError) AllErrors() []error { return m }

// SingleSubtaskValidationError is the validation error returned by
// SingleSubtask.Validate if the designated constraints aren't met.
type SingleSubtaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleSubtaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleSubtaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleSubtaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleSubtaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleSubtaskValidationError) ErrorName() string { return "SingleSubtaskValidationError" }

// Error satisfies the builtin error interface
func (e SingleSubtaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleSubtask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleSubtaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleSubtaskValidationError{}

// Validate checks the field values on GetSubtasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubtasksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubtasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubtasksRequestMultiError, or nil if none found.
func (m *GetSubtasksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubtasksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return GetSubtasksRequestMultiError(errors)
	}

	return nil
}

// GetSubtasksRequestMultiError is an error wrapping multiple validation errors
// returned by GetSubtasksRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSubtasksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubtasksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubtasksRequestMultiError) AllErrors() []error { return m }

// GetSubtasksRequestValidationError is the validation error returned by
// GetSubtasksRequest.Validate if the designated constraints aren't met.
type GetSubtasksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubtasksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubtasksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubtasksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubtasksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubtasksRequestValidationError) ErrorName() string {
	return "GetSubtasksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubtasksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubtasksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubtasksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubtasksRequestValidationError{}

// Validate checks the field values on GetSubtasksReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSubtasksReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubtasksReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubtasksReplyMultiError, or nil if none found.
func (m *GetSubtasksReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubtasksReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubtasks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSubtasksReplyValidationError{
						field:  fmt.Sprintf("Subtasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSubtasksReplyValidationError{
						field:  fmt.Sprintf("Subtasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSubtasksReplyValidationError{
					field:  fmt.Sprintf("Subtasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSubtasksReplyMultiError(errors)
	}

	return nil
}

// GetSubtasksReplyMultiError is an error wrapping multiple validation errors
// returned by GetSubtasksReply.ValidateAll() if the designated constraints
// aren't met.
type GetSubtasksReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubtasksReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubtasksReplyMultiError) AllErrors() []error { return m }

// GetSubtasksReplyValidationError is the validation error returned by
// GetSubtasksReply.Validate if the designated constraints aren't met.
type GetSubtasksReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubtasksReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubtasksReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubtasksReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubtasksReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubtasksReplyValidationError) ErrorName() string { return "GetSubtasksReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetSubtasksReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubtasksReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubtasksReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubtasksReplyValidationError{}

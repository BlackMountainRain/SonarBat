// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: task/v1/subtask.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Subtask_CreateSubtask_FullMethodName    = "/api.task.v1.Subtask/CreateSubtask"
	Subtask_UpdateSubtask_FullMethodName    = "/api.task.v1.Subtask/UpdateSubtask"
	Subtask_OverwriteSubtask_FullMethodName = "/api.task.v1.Subtask/OverwriteSubtask"
	Subtask_DeleteSubtask_FullMethodName    = "/api.task.v1.Subtask/DeleteSubtask"
	Subtask_GetSubtask_FullMethodName       = "/api.task.v1.Subtask/GetSubtask"
	Subtask_GetSubtasks_FullMethodName      = "/api.task.v1.Subtask/GetSubtasks"
)

// SubtaskClient is the client API for Subtask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubtaskClient interface {
	CreateSubtask(ctx context.Context, in *CreateSubtaskRequest, opts ...grpc.CallOption) (*CreateSubtaskReply, error)
	UpdateSubtask(ctx context.Context, in *UpdateSubtaskRequest, opts ...grpc.CallOption) (*UpdateSubtaskReply, error)
	OverwriteSubtask(ctx context.Context, in *OverwriteSubtaskRequest, opts ...grpc.CallOption) (*OverwriteSubtaskReply, error)
	DeleteSubtask(ctx context.Context, in *DeleteSubtaskRequest, opts ...grpc.CallOption) (*DeleteSubtaskReply, error)
	GetSubtask(ctx context.Context, in *GetSubtaskRequest, opts ...grpc.CallOption) (*GetSubtaskReply, error)
	GetSubtasks(ctx context.Context, in *GetSubtasksRequest, opts ...grpc.CallOption) (*GetSubtasksReply, error)
}

type subtaskClient struct {
	cc grpc.ClientConnInterface
}

func NewSubtaskClient(cc grpc.ClientConnInterface) SubtaskClient {
	return &subtaskClient{cc}
}

func (c *subtaskClient) CreateSubtask(ctx context.Context, in *CreateSubtaskRequest, opts ...grpc.CallOption) (*CreateSubtaskReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSubtaskReply)
	err := c.cc.Invoke(ctx, Subtask_CreateSubtask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtaskClient) UpdateSubtask(ctx context.Context, in *UpdateSubtaskRequest, opts ...grpc.CallOption) (*UpdateSubtaskReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSubtaskReply)
	err := c.cc.Invoke(ctx, Subtask_UpdateSubtask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtaskClient) OverwriteSubtask(ctx context.Context, in *OverwriteSubtaskRequest, opts ...grpc.CallOption) (*OverwriteSubtaskReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OverwriteSubtaskReply)
	err := c.cc.Invoke(ctx, Subtask_OverwriteSubtask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtaskClient) DeleteSubtask(ctx context.Context, in *DeleteSubtaskRequest, opts ...grpc.CallOption) (*DeleteSubtaskReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSubtaskReply)
	err := c.cc.Invoke(ctx, Subtask_DeleteSubtask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtaskClient) GetSubtask(ctx context.Context, in *GetSubtaskRequest, opts ...grpc.CallOption) (*GetSubtaskReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubtaskReply)
	err := c.cc.Invoke(ctx, Subtask_GetSubtask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtaskClient) GetSubtasks(ctx context.Context, in *GetSubtasksRequest, opts ...grpc.CallOption) (*GetSubtasksReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubtasksReply)
	err := c.cc.Invoke(ctx, Subtask_GetSubtasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubtaskServer is the server API for Subtask service.
// All implementations must embed UnimplementedSubtaskServer
// for forward compatibility
type SubtaskServer interface {
	CreateSubtask(context.Context, *CreateSubtaskRequest) (*CreateSubtaskReply, error)
	UpdateSubtask(context.Context, *UpdateSubtaskRequest) (*UpdateSubtaskReply, error)
	OverwriteSubtask(context.Context, *OverwriteSubtaskRequest) (*OverwriteSubtaskReply, error)
	DeleteSubtask(context.Context, *DeleteSubtaskRequest) (*DeleteSubtaskReply, error)
	GetSubtask(context.Context, *GetSubtaskRequest) (*GetSubtaskReply, error)
	GetSubtasks(context.Context, *GetSubtasksRequest) (*GetSubtasksReply, error)
	mustEmbedUnimplementedSubtaskServer()
}

// UnimplementedSubtaskServer must be embedded to have forward compatible implementations.
type UnimplementedSubtaskServer struct {
}

func (UnimplementedSubtaskServer) CreateSubtask(context.Context, *CreateSubtaskRequest) (*CreateSubtaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubtask not implemented")
}
func (UnimplementedSubtaskServer) UpdateSubtask(context.Context, *UpdateSubtaskRequest) (*UpdateSubtaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubtask not implemented")
}
func (UnimplementedSubtaskServer) OverwriteSubtask(context.Context, *OverwriteSubtaskRequest) (*OverwriteSubtaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverwriteSubtask not implemented")
}
func (UnimplementedSubtaskServer) DeleteSubtask(context.Context, *DeleteSubtaskRequest) (*DeleteSubtaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubtask not implemented")
}
func (UnimplementedSubtaskServer) GetSubtask(context.Context, *GetSubtaskRequest) (*GetSubtaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubtask not implemented")
}
func (UnimplementedSubtaskServer) GetSubtasks(context.Context, *GetSubtasksRequest) (*GetSubtasksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubtasks not implemented")
}
func (UnimplementedSubtaskServer) mustEmbedUnimplementedSubtaskServer() {}

// UnsafeSubtaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubtaskServer will
// result in compilation errors.
type UnsafeSubtaskServer interface {
	mustEmbedUnimplementedSubtaskServer()
}

func RegisterSubtaskServer(s grpc.ServiceRegistrar, srv SubtaskServer) {
	s.RegisterService(&Subtask_ServiceDesc, srv)
}

func _Subtask_CreateSubtask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubtaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtaskServer).CreateSubtask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subtask_CreateSubtask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtaskServer).CreateSubtask(ctx, req.(*CreateSubtaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subtask_UpdateSubtask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubtaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtaskServer).UpdateSubtask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subtask_UpdateSubtask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtaskServer).UpdateSubtask(ctx, req.(*UpdateSubtaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subtask_OverwriteSubtask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverwriteSubtaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtaskServer).OverwriteSubtask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subtask_OverwriteSubtask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtaskServer).OverwriteSubtask(ctx, req.(*OverwriteSubtaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subtask_DeleteSubtask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubtaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtaskServer).DeleteSubtask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subtask_DeleteSubtask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtaskServer).DeleteSubtask(ctx, req.(*DeleteSubtaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subtask_GetSubtask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubtaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtaskServer).GetSubtask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subtask_GetSubtask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtaskServer).GetSubtask(ctx, req.(*GetSubtaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subtask_GetSubtasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubtasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtaskServer).GetSubtasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subtask_GetSubtasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtaskServer).GetSubtasks(ctx, req.(*GetSubtasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Subtask_ServiceDesc is the grpc.ServiceDesc for Subtask service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Subtask_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.task.v1.Subtask",
	HandlerType: (*SubtaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubtask",
			Handler:    _Subtask_CreateSubtask_Handler,
		},
		{
			MethodName: "UpdateSubtask",
			Handler:    _Subtask_UpdateSubtask_Handler,
		},
		{
			MethodName: "OverwriteSubtask",
			Handler:    _Subtask_OverwriteSubtask_Handler,
		},
		{
			MethodName: "DeleteSubtask",
			Handler:    _Subtask_DeleteSubtask_Handler,
		},
		{
			MethodName: "GetSubtask",
			Handler:    _Subtask_GetSubtask_Handler,
		},
		{
			MethodName: "GetSubtasks",
			Handler:    _Subtask_GetSubtasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task/v1/subtask.proto",
}

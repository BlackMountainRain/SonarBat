// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.21.12
// source: task/v1/subtask.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSubtaskCreateSubtask = "/api.task.v1.Subtask/CreateSubtask"
const OperationSubtaskDeleteSubtask = "/api.task.v1.Subtask/DeleteSubtask"
const OperationSubtaskGetSubtask = "/api.task.v1.Subtask/GetSubtask"
const OperationSubtaskGetSubtasks = "/api.task.v1.Subtask/GetSubtasks"
const OperationSubtaskOverwriteSubtask = "/api.task.v1.Subtask/OverwriteSubtask"
const OperationSubtaskUpdateSubtask = "/api.task.v1.Subtask/UpdateSubtask"

type SubtaskHTTPServer interface {
	CreateSubtask(context.Context, *CreateSubtaskRequest) (*CreateSubtaskReply, error)
	DeleteSubtask(context.Context, *DeleteSubtaskRequest) (*DeleteSubtaskReply, error)
	GetSubtask(context.Context, *GetSubtaskRequest) (*GetSubtaskReply, error)
	GetSubtasks(context.Context, *GetSubtasksRequest) (*GetSubtasksReply, error)
	OverwriteSubtask(context.Context, *OverwriteSubtaskRequest) (*OverwriteSubtaskReply, error)
	UpdateSubtask(context.Context, *UpdateSubtaskRequest) (*UpdateSubtaskReply, error)
}

func RegisterSubtaskHTTPServer(s *http.Server, srv SubtaskHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/tasks/{task_id}/subtasks", _Subtask_CreateSubtask0_HTTP_Handler(srv))
	r.PUT("/v1/tasks/{task_id}/subtasks/{subtask_id}", _Subtask_UpdateSubtask0_HTTP_Handler(srv))
	r.PATCH("/v1/tasks/{task_id}/subtasks/{subtask_id}", _Subtask_OverwriteSubtask0_HTTP_Handler(srv))
	r.DELETE("/v1/tasks/{task_id}/subtasks/{subtask_id}", _Subtask_DeleteSubtask0_HTTP_Handler(srv))
	r.GET("/v1/tasks/{task_id}/subtasks/{subtask_id}", _Subtask_GetSubtask0_HTTP_Handler(srv))
	r.GET("/v1/tasks/{task_id}/subtasks", _Subtask_GetSubtasks0_HTTP_Handler(srv))
}

func _Subtask_CreateSubtask0_HTTP_Handler(srv SubtaskHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSubtaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSubtaskCreateSubtask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSubtask(ctx, req.(*CreateSubtaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSubtaskReply)
		return ctx.Result(200, reply)
	}
}

func _Subtask_UpdateSubtask0_HTTP_Handler(srv SubtaskHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSubtaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSubtaskUpdateSubtask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSubtask(ctx, req.(*UpdateSubtaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateSubtaskReply)
		return ctx.Result(200, reply)
	}
}

func _Subtask_OverwriteSubtask0_HTTP_Handler(srv SubtaskHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OverwriteSubtaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSubtaskOverwriteSubtask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OverwriteSubtask(ctx, req.(*OverwriteSubtaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OverwriteSubtaskReply)
		return ctx.Result(200, reply)
	}
}

func _Subtask_DeleteSubtask0_HTTP_Handler(srv SubtaskHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSubtaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSubtaskDeleteSubtask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSubtask(ctx, req.(*DeleteSubtaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteSubtaskReply)
		return ctx.Result(200, reply)
	}
}

func _Subtask_GetSubtask0_HTTP_Handler(srv SubtaskHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSubtaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSubtaskGetSubtask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSubtask(ctx, req.(*GetSubtaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSubtaskReply)
		return ctx.Result(200, reply)
	}
}

func _Subtask_GetSubtasks0_HTTP_Handler(srv SubtaskHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSubtasksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSubtaskGetSubtasks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSubtasks(ctx, req.(*GetSubtasksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSubtasksReply)
		return ctx.Result(200, reply)
	}
}

type SubtaskHTTPClient interface {
	CreateSubtask(ctx context.Context, req *CreateSubtaskRequest, opts ...http.CallOption) (rsp *CreateSubtaskReply, err error)
	DeleteSubtask(ctx context.Context, req *DeleteSubtaskRequest, opts ...http.CallOption) (rsp *DeleteSubtaskReply, err error)
	GetSubtask(ctx context.Context, req *GetSubtaskRequest, opts ...http.CallOption) (rsp *GetSubtaskReply, err error)
	GetSubtasks(ctx context.Context, req *GetSubtasksRequest, opts ...http.CallOption) (rsp *GetSubtasksReply, err error)
	OverwriteSubtask(ctx context.Context, req *OverwriteSubtaskRequest, opts ...http.CallOption) (rsp *OverwriteSubtaskReply, err error)
	UpdateSubtask(ctx context.Context, req *UpdateSubtaskRequest, opts ...http.CallOption) (rsp *UpdateSubtaskReply, err error)
}

type SubtaskHTTPClientImpl struct {
	cc *http.Client
}

func NewSubtaskHTTPClient(client *http.Client) SubtaskHTTPClient {
	return &SubtaskHTTPClientImpl{client}
}

func (c *SubtaskHTTPClientImpl) CreateSubtask(ctx context.Context, in *CreateSubtaskRequest, opts ...http.CallOption) (*CreateSubtaskReply, error) {
	var out CreateSubtaskReply
	pattern := "/v1/tasks/{task_id}/subtasks"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSubtaskCreateSubtask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SubtaskHTTPClientImpl) DeleteSubtask(ctx context.Context, in *DeleteSubtaskRequest, opts ...http.CallOption) (*DeleteSubtaskReply, error) {
	var out DeleteSubtaskReply
	pattern := "/v1/tasks/{task_id}/subtasks/{subtask_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSubtaskDeleteSubtask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SubtaskHTTPClientImpl) GetSubtask(ctx context.Context, in *GetSubtaskRequest, opts ...http.CallOption) (*GetSubtaskReply, error) {
	var out GetSubtaskReply
	pattern := "/v1/tasks/{task_id}/subtasks/{subtask_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSubtaskGetSubtask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SubtaskHTTPClientImpl) GetSubtasks(ctx context.Context, in *GetSubtasksRequest, opts ...http.CallOption) (*GetSubtasksReply, error) {
	var out GetSubtasksReply
	pattern := "/v1/tasks/{task_id}/subtasks"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSubtaskGetSubtasks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SubtaskHTTPClientImpl) OverwriteSubtask(ctx context.Context, in *OverwriteSubtaskRequest, opts ...http.CallOption) (*OverwriteSubtaskReply, error) {
	var out OverwriteSubtaskReply
	pattern := "/v1/tasks/{task_id}/subtasks/{subtask_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSubtaskOverwriteSubtask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SubtaskHTTPClientImpl) UpdateSubtask(ctx context.Context, in *UpdateSubtaskRequest, opts ...http.CallOption) (*UpdateSubtaskReply, error) {
	var out UpdateSubtaskReply
	pattern := "/v1/tasks/{task_id}/subtasks/{subtask_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSubtaskUpdateSubtask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

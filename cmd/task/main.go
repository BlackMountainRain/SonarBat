/**
 * Package task
 * @Author iFurySt <ifuryst@gmail.com>
 * @Date 2024/5/6
 */

package main

import (
	"flag"
	"github.com/go-kratos/kratos/v2/config/env"
	"github.com/google/uuid"
	"github.com/hashicorp/consul/api"
	"github.com/joho/godotenv"
	"os"
	"sonar-bat/internal/runtime"
	"sonar-bat/third_party/consul"
	"time"

	"sonar-bat/internal/conf"

	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/config"
	"github.com/go-kratos/kratos/v2/config/file"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/middleware/tracing"
	"github.com/go-kratos/kratos/v2/transport/grpc"
	"github.com/go-kratos/kratos/v2/transport/http"

	_ "go.uber.org/automaxprocs"
)

var (
	// Name is the name of the compiled software.
	Name string
	// Version is the version of the compiled software.
	Version string

	// confPath is the config path.
	confPath string
	// loadEnv determines whether to load env from .env.
	loadEnv bool

	// id is the service id. It is generated by hostname and uuid.
	id string
	// uptime is the service start time.
	uptime time.Time
)

func init() {
	hostname, _ := os.Hostname()
	id = hostname + "_" + uuid.New().String()
	uptime = time.Now()

	flag.StringVar(&confPath, "conf", "./configs", "config path, eg: -conf config.yaml")
	flag.BoolVar(&loadEnv, "env", true, "load env from .env")
}

func newApp(logger log.Logger, gs *grpc.Server, hs *http.Server) *kratos.App {
	// new consul client
	client, err := api.NewClient(api.DefaultConfig())
	if err != nil {
		panic(err)
	}
	// new reg with consul client
	reg := consul.New(client)
	return kratos.New(
		kratos.ID(id),
		kratos.Name(Name),
		kratos.Version(Version),
		kratos.Metadata(map[string]string{}),
		kratos.Logger(logger),
		kratos.Server(
			gs,
			hs,
		),
		kratos.Registrar(reg),
	)
}

func main() {
	flag.Parse()
	logger := log.With(log.NewStdLogger(os.Stdout),
		"ts", log.DefaultTimestamp,
		"caller", log.DefaultCaller,
		"service.id", id,
		"service.name", Name,
		"service.version", Version,
		"trace.id", tracing.TraceID(),
		"span.id", tracing.SpanID(),
	)

	_ = godotenv.Load()

	c := config.New(
		config.WithSource(
			env.NewSource("TASK_"),
			file.NewSource(confPath),
		),
	)
	defer c.Close()

	if err := c.Load(); err != nil {
		panic(err)
	}

	var bc conf.Bootstrap
	if err := c.Scan(&bc); err != nil {
		panic(err)
	}

	app, cleanup, err := wireApp(bc.Server, bc.Data, logger, runtime.Info{
		ID:      id,
		Name:    Name,
		Version: Version,
		Uptime:  uptime,
	})
	if err != nil {
		panic(err)
	}
	defer cleanup()

	// start and wait for stop signal
	if err = app.Run(); err != nil {
		panic(err)
	}
}

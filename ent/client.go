// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"sonar-bat/ent/migrate"

	"sonar-bat/ent/dictionary"
	"sonar-bat/ent/host"
	"sonar-bat/ent/hostblacklist"
	"sonar-bat/ent/rbacobject"
	"sonar-bat/ent/rbacpolicy"
	"sonar-bat/ent/rbacrole"
	"sonar-bat/ent/subtask"
	"sonar-bat/ent/task"
	"sonar-bat/ent/token"
	"sonar-bat/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Dictionary is the client for interacting with the Dictionary builders.
	Dictionary *DictionaryClient
	// Host is the client for interacting with the Host builders.
	Host *HostClient
	// HostBlacklist is the client for interacting with the HostBlacklist builders.
	HostBlacklist *HostBlacklistClient
	// RbacObject is the client for interacting with the RbacObject builders.
	RbacObject *RbacObjectClient
	// RbacPolicy is the client for interacting with the RbacPolicy builders.
	RbacPolicy *RbacPolicyClient
	// RbacRole is the client for interacting with the RbacRole builders.
	RbacRole *RbacRoleClient
	// Subtask is the client for interacting with the Subtask builders.
	Subtask *SubtaskClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// Token is the client for interacting with the Token builders.
	Token *TokenClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Dictionary = NewDictionaryClient(c.config)
	c.Host = NewHostClient(c.config)
	c.HostBlacklist = NewHostBlacklistClient(c.config)
	c.RbacObject = NewRbacObjectClient(c.config)
	c.RbacPolicy = NewRbacPolicyClient(c.config)
	c.RbacRole = NewRbacRoleClient(c.config)
	c.Subtask = NewSubtaskClient(c.config)
	c.Task = NewTaskClient(c.config)
	c.Token = NewTokenClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Dictionary:    NewDictionaryClient(cfg),
		Host:          NewHostClient(cfg),
		HostBlacklist: NewHostBlacklistClient(cfg),
		RbacObject:    NewRbacObjectClient(cfg),
		RbacPolicy:    NewRbacPolicyClient(cfg),
		RbacRole:      NewRbacRoleClient(cfg),
		Subtask:       NewSubtaskClient(cfg),
		Task:          NewTaskClient(cfg),
		Token:         NewTokenClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Dictionary:    NewDictionaryClient(cfg),
		Host:          NewHostClient(cfg),
		HostBlacklist: NewHostBlacklistClient(cfg),
		RbacObject:    NewRbacObjectClient(cfg),
		RbacPolicy:    NewRbacPolicyClient(cfg),
		RbacRole:      NewRbacRoleClient(cfg),
		Subtask:       NewSubtaskClient(cfg),
		Task:          NewTaskClient(cfg),
		Token:         NewTokenClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Dictionary.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Dictionary, c.Host, c.HostBlacklist, c.RbacObject, c.RbacPolicy, c.RbacRole,
		c.Subtask, c.Task, c.Token, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Dictionary, c.Host, c.HostBlacklist, c.RbacObject, c.RbacPolicy, c.RbacRole,
		c.Subtask, c.Task, c.Token, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *DictionaryMutation:
		return c.Dictionary.mutate(ctx, m)
	case *HostMutation:
		return c.Host.mutate(ctx, m)
	case *HostBlacklistMutation:
		return c.HostBlacklist.mutate(ctx, m)
	case *RbacObjectMutation:
		return c.RbacObject.mutate(ctx, m)
	case *RbacPolicyMutation:
		return c.RbacPolicy.mutate(ctx, m)
	case *RbacRoleMutation:
		return c.RbacRole.mutate(ctx, m)
	case *SubtaskMutation:
		return c.Subtask.mutate(ctx, m)
	case *TaskMutation:
		return c.Task.mutate(ctx, m)
	case *TokenMutation:
		return c.Token.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// DictionaryClient is a client for the Dictionary schema.
type DictionaryClient struct {
	config
}

// NewDictionaryClient returns a client for the Dictionary from the given config.
func NewDictionaryClient(c config) *DictionaryClient {
	return &DictionaryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dictionary.Hooks(f(g(h())))`.
func (c *DictionaryClient) Use(hooks ...Hook) {
	c.hooks.Dictionary = append(c.hooks.Dictionary, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dictionary.Intercept(f(g(h())))`.
func (c *DictionaryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Dictionary = append(c.inters.Dictionary, interceptors...)
}

// Create returns a builder for creating a Dictionary entity.
func (c *DictionaryClient) Create() *DictionaryCreate {
	mutation := newDictionaryMutation(c.config, OpCreate)
	return &DictionaryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Dictionary entities.
func (c *DictionaryClient) CreateBulk(builders ...*DictionaryCreate) *DictionaryCreateBulk {
	return &DictionaryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DictionaryClient) MapCreateBulk(slice any, setFunc func(*DictionaryCreate, int)) *DictionaryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DictionaryCreateBulk{err: fmt.Errorf("calling to DictionaryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DictionaryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DictionaryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Dictionary.
func (c *DictionaryClient) Update() *DictionaryUpdate {
	mutation := newDictionaryMutation(c.config, OpUpdate)
	return &DictionaryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DictionaryClient) UpdateOne(d *Dictionary) *DictionaryUpdateOne {
	mutation := newDictionaryMutation(c.config, OpUpdateOne, withDictionary(d))
	return &DictionaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DictionaryClient) UpdateOneID(id int64) *DictionaryUpdateOne {
	mutation := newDictionaryMutation(c.config, OpUpdateOne, withDictionaryID(id))
	return &DictionaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Dictionary.
func (c *DictionaryClient) Delete() *DictionaryDelete {
	mutation := newDictionaryMutation(c.config, OpDelete)
	return &DictionaryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DictionaryClient) DeleteOne(d *Dictionary) *DictionaryDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DictionaryClient) DeleteOneID(id int64) *DictionaryDeleteOne {
	builder := c.Delete().Where(dictionary.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DictionaryDeleteOne{builder}
}

// Query returns a query builder for Dictionary.
func (c *DictionaryClient) Query() *DictionaryQuery {
	return &DictionaryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDictionary},
		inters: c.Interceptors(),
	}
}

// Get returns a Dictionary entity by its id.
func (c *DictionaryClient) Get(ctx context.Context, id int64) (*Dictionary, error) {
	return c.Query().Where(dictionary.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DictionaryClient) GetX(ctx context.Context, id int64) *Dictionary {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DictionaryClient) Hooks() []Hook {
	return c.hooks.Dictionary
}

// Interceptors returns the client interceptors.
func (c *DictionaryClient) Interceptors() []Interceptor {
	return c.inters.Dictionary
}

func (c *DictionaryClient) mutate(ctx context.Context, m *DictionaryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DictionaryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DictionaryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DictionaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DictionaryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Dictionary mutation op: %q", m.Op())
	}
}

// HostClient is a client for the Host schema.
type HostClient struct {
	config
}

// NewHostClient returns a client for the Host from the given config.
func NewHostClient(c config) *HostClient {
	return &HostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `host.Hooks(f(g(h())))`.
func (c *HostClient) Use(hooks ...Hook) {
	c.hooks.Host = append(c.hooks.Host, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `host.Intercept(f(g(h())))`.
func (c *HostClient) Intercept(interceptors ...Interceptor) {
	c.inters.Host = append(c.inters.Host, interceptors...)
}

// Create returns a builder for creating a Host entity.
func (c *HostClient) Create() *HostCreate {
	mutation := newHostMutation(c.config, OpCreate)
	return &HostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Host entities.
func (c *HostClient) CreateBulk(builders ...*HostCreate) *HostCreateBulk {
	return &HostCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HostClient) MapCreateBulk(slice any, setFunc func(*HostCreate, int)) *HostCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HostCreateBulk{err: fmt.Errorf("calling to HostClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HostCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Host.
func (c *HostClient) Update() *HostUpdate {
	mutation := newHostMutation(c.config, OpUpdate)
	return &HostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostClient) UpdateOne(h *Host) *HostUpdateOne {
	mutation := newHostMutation(c.config, OpUpdateOne, withHost(h))
	return &HostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostClient) UpdateOneID(id uuid.UUID) *HostUpdateOne {
	mutation := newHostMutation(c.config, OpUpdateOne, withHostID(id))
	return &HostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Host.
func (c *HostClient) Delete() *HostDelete {
	mutation := newHostMutation(c.config, OpDelete)
	return &HostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HostClient) DeleteOne(h *Host) *HostDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HostClient) DeleteOneID(id uuid.UUID) *HostDeleteOne {
	builder := c.Delete().Where(host.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostDeleteOne{builder}
}

// Query returns a query builder for Host.
func (c *HostClient) Query() *HostQuery {
	return &HostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHost},
		inters: c.Interceptors(),
	}
}

// Get returns a Host entity by its id.
func (c *HostClient) Get(ctx context.Context, id uuid.UUID) (*Host, error) {
	return c.Query().Where(host.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostClient) GetX(ctx context.Context, id uuid.UUID) *Host {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHostBlacklist queries the host_blacklist edge of a Host.
func (c *HostClient) QueryHostBlacklist(h *Host) *HostBlacklistQuery {
	query := (&HostBlacklistClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(hostblacklist.Table, hostblacklist.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, host.HostBlacklistTable, host.HostBlacklistColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostClient) Hooks() []Hook {
	return c.hooks.Host
}

// Interceptors returns the client interceptors.
func (c *HostClient) Interceptors() []Interceptor {
	return c.inters.Host
}

func (c *HostClient) mutate(ctx context.Context, m *HostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Host mutation op: %q", m.Op())
	}
}

// HostBlacklistClient is a client for the HostBlacklist schema.
type HostBlacklistClient struct {
	config
}

// NewHostBlacklistClient returns a client for the HostBlacklist from the given config.
func NewHostBlacklistClient(c config) *HostBlacklistClient {
	return &HostBlacklistClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hostblacklist.Hooks(f(g(h())))`.
func (c *HostBlacklistClient) Use(hooks ...Hook) {
	c.hooks.HostBlacklist = append(c.hooks.HostBlacklist, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hostblacklist.Intercept(f(g(h())))`.
func (c *HostBlacklistClient) Intercept(interceptors ...Interceptor) {
	c.inters.HostBlacklist = append(c.inters.HostBlacklist, interceptors...)
}

// Create returns a builder for creating a HostBlacklist entity.
func (c *HostBlacklistClient) Create() *HostBlacklistCreate {
	mutation := newHostBlacklistMutation(c.config, OpCreate)
	return &HostBlacklistCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HostBlacklist entities.
func (c *HostBlacklistClient) CreateBulk(builders ...*HostBlacklistCreate) *HostBlacklistCreateBulk {
	return &HostBlacklistCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HostBlacklistClient) MapCreateBulk(slice any, setFunc func(*HostBlacklistCreate, int)) *HostBlacklistCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HostBlacklistCreateBulk{err: fmt.Errorf("calling to HostBlacklistClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HostBlacklistCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HostBlacklistCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HostBlacklist.
func (c *HostBlacklistClient) Update() *HostBlacklistUpdate {
	mutation := newHostBlacklistMutation(c.config, OpUpdate)
	return &HostBlacklistUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostBlacklistClient) UpdateOne(hb *HostBlacklist) *HostBlacklistUpdateOne {
	mutation := newHostBlacklistMutation(c.config, OpUpdateOne, withHostBlacklist(hb))
	return &HostBlacklistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostBlacklistClient) UpdateOneID(id uuid.UUID) *HostBlacklistUpdateOne {
	mutation := newHostBlacklistMutation(c.config, OpUpdateOne, withHostBlacklistID(id))
	return &HostBlacklistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HostBlacklist.
func (c *HostBlacklistClient) Delete() *HostBlacklistDelete {
	mutation := newHostBlacklistMutation(c.config, OpDelete)
	return &HostBlacklistDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HostBlacklistClient) DeleteOne(hb *HostBlacklist) *HostBlacklistDeleteOne {
	return c.DeleteOneID(hb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HostBlacklistClient) DeleteOneID(id uuid.UUID) *HostBlacklistDeleteOne {
	builder := c.Delete().Where(hostblacklist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostBlacklistDeleteOne{builder}
}

// Query returns a query builder for HostBlacklist.
func (c *HostBlacklistClient) Query() *HostBlacklistQuery {
	return &HostBlacklistQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHostBlacklist},
		inters: c.Interceptors(),
	}
}

// Get returns a HostBlacklist entity by its id.
func (c *HostBlacklistClient) Get(ctx context.Context, id uuid.UUID) (*HostBlacklist, error) {
	return c.Query().Where(hostblacklist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostBlacklistClient) GetX(ctx context.Context, id uuid.UUID) *HostBlacklist {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHost queries the host edge of a HostBlacklist.
func (c *HostBlacklistClient) QueryHost(hb *HostBlacklist) *HostQuery {
	query := (&HostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostblacklist.Table, hostblacklist.FieldID, id),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hostblacklist.HostTable, hostblacklist.HostColumn),
		)
		fromV = sqlgraph.Neighbors(hb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostBlacklistClient) Hooks() []Hook {
	return c.hooks.HostBlacklist
}

// Interceptors returns the client interceptors.
func (c *HostBlacklistClient) Interceptors() []Interceptor {
	return c.inters.HostBlacklist
}

func (c *HostBlacklistClient) mutate(ctx context.Context, m *HostBlacklistMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HostBlacklistCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HostBlacklistUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HostBlacklistUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HostBlacklistDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HostBlacklist mutation op: %q", m.Op())
	}
}

// RbacObjectClient is a client for the RbacObject schema.
type RbacObjectClient struct {
	config
}

// NewRbacObjectClient returns a client for the RbacObject from the given config.
func NewRbacObjectClient(c config) *RbacObjectClient {
	return &RbacObjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rbacobject.Hooks(f(g(h())))`.
func (c *RbacObjectClient) Use(hooks ...Hook) {
	c.hooks.RbacObject = append(c.hooks.RbacObject, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rbacobject.Intercept(f(g(h())))`.
func (c *RbacObjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.RbacObject = append(c.inters.RbacObject, interceptors...)
}

// Create returns a builder for creating a RbacObject entity.
func (c *RbacObjectClient) Create() *RbacObjectCreate {
	mutation := newRbacObjectMutation(c.config, OpCreate)
	return &RbacObjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RbacObject entities.
func (c *RbacObjectClient) CreateBulk(builders ...*RbacObjectCreate) *RbacObjectCreateBulk {
	return &RbacObjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RbacObjectClient) MapCreateBulk(slice any, setFunc func(*RbacObjectCreate, int)) *RbacObjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RbacObjectCreateBulk{err: fmt.Errorf("calling to RbacObjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RbacObjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RbacObjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RbacObject.
func (c *RbacObjectClient) Update() *RbacObjectUpdate {
	mutation := newRbacObjectMutation(c.config, OpUpdate)
	return &RbacObjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RbacObjectClient) UpdateOne(ro *RbacObject) *RbacObjectUpdateOne {
	mutation := newRbacObjectMutation(c.config, OpUpdateOne, withRbacObject(ro))
	return &RbacObjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RbacObjectClient) UpdateOneID(id int64) *RbacObjectUpdateOne {
	mutation := newRbacObjectMutation(c.config, OpUpdateOne, withRbacObjectID(id))
	return &RbacObjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RbacObject.
func (c *RbacObjectClient) Delete() *RbacObjectDelete {
	mutation := newRbacObjectMutation(c.config, OpDelete)
	return &RbacObjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RbacObjectClient) DeleteOne(ro *RbacObject) *RbacObjectDeleteOne {
	return c.DeleteOneID(ro.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RbacObjectClient) DeleteOneID(id int64) *RbacObjectDeleteOne {
	builder := c.Delete().Where(rbacobject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RbacObjectDeleteOne{builder}
}

// Query returns a query builder for RbacObject.
func (c *RbacObjectClient) Query() *RbacObjectQuery {
	return &RbacObjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRbacObject},
		inters: c.Interceptors(),
	}
}

// Get returns a RbacObject entity by its id.
func (c *RbacObjectClient) Get(ctx context.Context, id int64) (*RbacObject, error) {
	return c.Query().Where(rbacobject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RbacObjectClient) GetX(ctx context.Context, id int64) *RbacObject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RbacObjectClient) Hooks() []Hook {
	return c.hooks.RbacObject
}

// Interceptors returns the client interceptors.
func (c *RbacObjectClient) Interceptors() []Interceptor {
	return c.inters.RbacObject
}

func (c *RbacObjectClient) mutate(ctx context.Context, m *RbacObjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RbacObjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RbacObjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RbacObjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RbacObjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RbacObject mutation op: %q", m.Op())
	}
}

// RbacPolicyClient is a client for the RbacPolicy schema.
type RbacPolicyClient struct {
	config
}

// NewRbacPolicyClient returns a client for the RbacPolicy from the given config.
func NewRbacPolicyClient(c config) *RbacPolicyClient {
	return &RbacPolicyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rbacpolicy.Hooks(f(g(h())))`.
func (c *RbacPolicyClient) Use(hooks ...Hook) {
	c.hooks.RbacPolicy = append(c.hooks.RbacPolicy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rbacpolicy.Intercept(f(g(h())))`.
func (c *RbacPolicyClient) Intercept(interceptors ...Interceptor) {
	c.inters.RbacPolicy = append(c.inters.RbacPolicy, interceptors...)
}

// Create returns a builder for creating a RbacPolicy entity.
func (c *RbacPolicyClient) Create() *RbacPolicyCreate {
	mutation := newRbacPolicyMutation(c.config, OpCreate)
	return &RbacPolicyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RbacPolicy entities.
func (c *RbacPolicyClient) CreateBulk(builders ...*RbacPolicyCreate) *RbacPolicyCreateBulk {
	return &RbacPolicyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RbacPolicyClient) MapCreateBulk(slice any, setFunc func(*RbacPolicyCreate, int)) *RbacPolicyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RbacPolicyCreateBulk{err: fmt.Errorf("calling to RbacPolicyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RbacPolicyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RbacPolicyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RbacPolicy.
func (c *RbacPolicyClient) Update() *RbacPolicyUpdate {
	mutation := newRbacPolicyMutation(c.config, OpUpdate)
	return &RbacPolicyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RbacPolicyClient) UpdateOne(rp *RbacPolicy) *RbacPolicyUpdateOne {
	mutation := newRbacPolicyMutation(c.config, OpUpdateOne, withRbacPolicy(rp))
	return &RbacPolicyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RbacPolicyClient) UpdateOneID(id int64) *RbacPolicyUpdateOne {
	mutation := newRbacPolicyMutation(c.config, OpUpdateOne, withRbacPolicyID(id))
	return &RbacPolicyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RbacPolicy.
func (c *RbacPolicyClient) Delete() *RbacPolicyDelete {
	mutation := newRbacPolicyMutation(c.config, OpDelete)
	return &RbacPolicyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RbacPolicyClient) DeleteOne(rp *RbacPolicy) *RbacPolicyDeleteOne {
	return c.DeleteOneID(rp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RbacPolicyClient) DeleteOneID(id int64) *RbacPolicyDeleteOne {
	builder := c.Delete().Where(rbacpolicy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RbacPolicyDeleteOne{builder}
}

// Query returns a query builder for RbacPolicy.
func (c *RbacPolicyClient) Query() *RbacPolicyQuery {
	return &RbacPolicyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRbacPolicy},
		inters: c.Interceptors(),
	}
}

// Get returns a RbacPolicy entity by its id.
func (c *RbacPolicyClient) Get(ctx context.Context, id int64) (*RbacPolicy, error) {
	return c.Query().Where(rbacpolicy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RbacPolicyClient) GetX(ctx context.Context, id int64) *RbacPolicy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RbacPolicyClient) Hooks() []Hook {
	return c.hooks.RbacPolicy
}

// Interceptors returns the client interceptors.
func (c *RbacPolicyClient) Interceptors() []Interceptor {
	return c.inters.RbacPolicy
}

func (c *RbacPolicyClient) mutate(ctx context.Context, m *RbacPolicyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RbacPolicyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RbacPolicyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RbacPolicyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RbacPolicyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RbacPolicy mutation op: %q", m.Op())
	}
}

// RbacRoleClient is a client for the RbacRole schema.
type RbacRoleClient struct {
	config
}

// NewRbacRoleClient returns a client for the RbacRole from the given config.
func NewRbacRoleClient(c config) *RbacRoleClient {
	return &RbacRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rbacrole.Hooks(f(g(h())))`.
func (c *RbacRoleClient) Use(hooks ...Hook) {
	c.hooks.RbacRole = append(c.hooks.RbacRole, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rbacrole.Intercept(f(g(h())))`.
func (c *RbacRoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.RbacRole = append(c.inters.RbacRole, interceptors...)
}

// Create returns a builder for creating a RbacRole entity.
func (c *RbacRoleClient) Create() *RbacRoleCreate {
	mutation := newRbacRoleMutation(c.config, OpCreate)
	return &RbacRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RbacRole entities.
func (c *RbacRoleClient) CreateBulk(builders ...*RbacRoleCreate) *RbacRoleCreateBulk {
	return &RbacRoleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RbacRoleClient) MapCreateBulk(slice any, setFunc func(*RbacRoleCreate, int)) *RbacRoleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RbacRoleCreateBulk{err: fmt.Errorf("calling to RbacRoleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RbacRoleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RbacRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RbacRole.
func (c *RbacRoleClient) Update() *RbacRoleUpdate {
	mutation := newRbacRoleMutation(c.config, OpUpdate)
	return &RbacRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RbacRoleClient) UpdateOne(rr *RbacRole) *RbacRoleUpdateOne {
	mutation := newRbacRoleMutation(c.config, OpUpdateOne, withRbacRole(rr))
	return &RbacRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RbacRoleClient) UpdateOneID(id int64) *RbacRoleUpdateOne {
	mutation := newRbacRoleMutation(c.config, OpUpdateOne, withRbacRoleID(id))
	return &RbacRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RbacRole.
func (c *RbacRoleClient) Delete() *RbacRoleDelete {
	mutation := newRbacRoleMutation(c.config, OpDelete)
	return &RbacRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RbacRoleClient) DeleteOne(rr *RbacRole) *RbacRoleDeleteOne {
	return c.DeleteOneID(rr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RbacRoleClient) DeleteOneID(id int64) *RbacRoleDeleteOne {
	builder := c.Delete().Where(rbacrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RbacRoleDeleteOne{builder}
}

// Query returns a query builder for RbacRole.
func (c *RbacRoleClient) Query() *RbacRoleQuery {
	return &RbacRoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRbacRole},
		inters: c.Interceptors(),
	}
}

// Get returns a RbacRole entity by its id.
func (c *RbacRoleClient) Get(ctx context.Context, id int64) (*RbacRole, error) {
	return c.Query().Where(rbacrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RbacRoleClient) GetX(ctx context.Context, id int64) *RbacRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a RbacRole.
func (c *RbacRoleClient) QueryUsers(rr *RbacRole) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rbacrole.Table, rbacrole.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, rbacrole.UsersTable, rbacrole.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RbacRoleClient) Hooks() []Hook {
	return c.hooks.RbacRole
}

// Interceptors returns the client interceptors.
func (c *RbacRoleClient) Interceptors() []Interceptor {
	return c.inters.RbacRole
}

func (c *RbacRoleClient) mutate(ctx context.Context, m *RbacRoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RbacRoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RbacRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RbacRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RbacRoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RbacRole mutation op: %q", m.Op())
	}
}

// SubtaskClient is a client for the Subtask schema.
type SubtaskClient struct {
	config
}

// NewSubtaskClient returns a client for the Subtask from the given config.
func NewSubtaskClient(c config) *SubtaskClient {
	return &SubtaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subtask.Hooks(f(g(h())))`.
func (c *SubtaskClient) Use(hooks ...Hook) {
	c.hooks.Subtask = append(c.hooks.Subtask, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subtask.Intercept(f(g(h())))`.
func (c *SubtaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.Subtask = append(c.inters.Subtask, interceptors...)
}

// Create returns a builder for creating a Subtask entity.
func (c *SubtaskClient) Create() *SubtaskCreate {
	mutation := newSubtaskMutation(c.config, OpCreate)
	return &SubtaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Subtask entities.
func (c *SubtaskClient) CreateBulk(builders ...*SubtaskCreate) *SubtaskCreateBulk {
	return &SubtaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubtaskClient) MapCreateBulk(slice any, setFunc func(*SubtaskCreate, int)) *SubtaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubtaskCreateBulk{err: fmt.Errorf("calling to SubtaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubtaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubtaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Subtask.
func (c *SubtaskClient) Update() *SubtaskUpdate {
	mutation := newSubtaskMutation(c.config, OpUpdate)
	return &SubtaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubtaskClient) UpdateOne(s *Subtask) *SubtaskUpdateOne {
	mutation := newSubtaskMutation(c.config, OpUpdateOne, withSubtask(s))
	return &SubtaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubtaskClient) UpdateOneID(id uuid.UUID) *SubtaskUpdateOne {
	mutation := newSubtaskMutation(c.config, OpUpdateOne, withSubtaskID(id))
	return &SubtaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Subtask.
func (c *SubtaskClient) Delete() *SubtaskDelete {
	mutation := newSubtaskMutation(c.config, OpDelete)
	return &SubtaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubtaskClient) DeleteOne(s *Subtask) *SubtaskDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubtaskClient) DeleteOneID(id uuid.UUID) *SubtaskDeleteOne {
	builder := c.Delete().Where(subtask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubtaskDeleteOne{builder}
}

// Query returns a query builder for Subtask.
func (c *SubtaskClient) Query() *SubtaskQuery {
	return &SubtaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubtask},
		inters: c.Interceptors(),
	}
}

// Get returns a Subtask entity by its id.
func (c *SubtaskClient) Get(ctx context.Context, id uuid.UUID) (*Subtask, error) {
	return c.Query().Where(subtask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubtaskClient) GetX(ctx context.Context, id uuid.UUID) *Subtask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTask queries the task edge of a Subtask.
func (c *SubtaskClient) QueryTask(s *Subtask) *TaskQuery {
	query := (&TaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subtask.Table, subtask.FieldID, id),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subtask.TaskTable, subtask.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubtaskClient) Hooks() []Hook {
	return c.hooks.Subtask
}

// Interceptors returns the client interceptors.
func (c *SubtaskClient) Interceptors() []Interceptor {
	return c.inters.Subtask
}

func (c *SubtaskClient) mutate(ctx context.Context, m *SubtaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubtaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubtaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubtaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubtaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Subtask mutation op: %q", m.Op())
	}
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `task.Intercept(f(g(h())))`.
func (c *TaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.Task = append(c.inters.Task, interceptors...)
}

// Create returns a builder for creating a Task entity.
func (c *TaskClient) Create() *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TaskClient) MapCreateBulk(slice any, setFunc func(*TaskCreate, int)) *TaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TaskCreateBulk{err: fmt.Errorf("calling to TaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id uuid.UUID) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskClient) DeleteOneID(id uuid.UUID) *TaskDeleteOne {
	builder := c.Delete().Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTask},
		inters: c.Interceptors(),
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id uuid.UUID) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id uuid.UUID) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubtasks queries the subtasks edge of a Task.
func (c *TaskClient) QuerySubtasks(t *Task) *SubtaskQuery {
	query := (&SubtaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, id),
			sqlgraph.To(subtask.Table, subtask.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, task.SubtasksTable, task.SubtasksColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	return c.hooks.Task
}

// Interceptors returns the client interceptors.
func (c *TaskClient) Interceptors() []Interceptor {
	return c.inters.Task
}

func (c *TaskClient) mutate(ctx context.Context, m *TaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Task mutation op: %q", m.Op())
	}
}

// TokenClient is a client for the Token schema.
type TokenClient struct {
	config
}

// NewTokenClient returns a client for the Token from the given config.
func NewTokenClient(c config) *TokenClient {
	return &TokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `token.Hooks(f(g(h())))`.
func (c *TokenClient) Use(hooks ...Hook) {
	c.hooks.Token = append(c.hooks.Token, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `token.Intercept(f(g(h())))`.
func (c *TokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.Token = append(c.inters.Token, interceptors...)
}

// Create returns a builder for creating a Token entity.
func (c *TokenClient) Create() *TokenCreate {
	mutation := newTokenMutation(c.config, OpCreate)
	return &TokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Token entities.
func (c *TokenClient) CreateBulk(builders ...*TokenCreate) *TokenCreateBulk {
	return &TokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TokenClient) MapCreateBulk(slice any, setFunc func(*TokenCreate, int)) *TokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TokenCreateBulk{err: fmt.Errorf("calling to TokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Token.
func (c *TokenClient) Update() *TokenUpdate {
	mutation := newTokenMutation(c.config, OpUpdate)
	return &TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TokenClient) UpdateOne(t *Token) *TokenUpdateOne {
	mutation := newTokenMutation(c.config, OpUpdateOne, withToken(t))
	return &TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TokenClient) UpdateOneID(id int64) *TokenUpdateOne {
	mutation := newTokenMutation(c.config, OpUpdateOne, withTokenID(id))
	return &TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Token.
func (c *TokenClient) Delete() *TokenDelete {
	mutation := newTokenMutation(c.config, OpDelete)
	return &TokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TokenClient) DeleteOne(t *Token) *TokenDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TokenClient) DeleteOneID(id int64) *TokenDeleteOne {
	builder := c.Delete().Where(token.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TokenDeleteOne{builder}
}

// Query returns a query builder for Token.
func (c *TokenClient) Query() *TokenQuery {
	return &TokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeToken},
		inters: c.Interceptors(),
	}
}

// Get returns a Token entity by its id.
func (c *TokenClient) Get(ctx context.Context, id int64) (*Token, error) {
	return c.Query().Where(token.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TokenClient) GetX(ctx context.Context, id int64) *Token {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Token.
func (c *TokenClient) QueryUser(t *Token) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(token.Table, token.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, token.UserTable, token.UserColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TokenClient) Hooks() []Hook {
	return c.hooks.Token
}

// Interceptors returns the client interceptors.
func (c *TokenClient) Interceptors() []Interceptor {
	return c.inters.Token
}

func (c *TokenClient) mutate(ctx context.Context, m *TokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Token mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoles queries the roles edge of a User.
func (c *UserClient) QueryRoles(u *User) *RbacRoleQuery {
	query := (&RbacRoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(rbacrole.Table, rbacrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.RolesTable, user.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTokens queries the tokens edge of a User.
func (c *UserClient) QueryTokens(u *User) *TokenQuery {
	query := (&TokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(token.Table, token.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TokensTable, user.TokensColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Dictionary, Host, HostBlacklist, RbacObject, RbacPolicy, RbacRole, Subtask,
		Task, Token, User []ent.Hook
	}
	inters struct {
		Dictionary, Host, HostBlacklist, RbacObject, RbacPolicy, RbacRole, Subtask,
		Task, Token, User []ent.Interceptor
	}
)

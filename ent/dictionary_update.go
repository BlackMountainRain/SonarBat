// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sonar-bat/ent/dictionary"
	"sonar-bat/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DictionaryUpdate is the builder for updating Dictionary entities.
type DictionaryUpdate struct {
	config
	hooks    []Hook
	mutation *DictionaryMutation
}

// Where appends a list predicates to the DictionaryUpdate builder.
func (du *DictionaryUpdate) Where(ps ...predicate.Dictionary) *DictionaryUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DictionaryUpdate) SetUpdatedAt(t time.Time) *DictionaryUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetCategory sets the "category" field.
func (du *DictionaryUpdate) SetCategory(s string) *DictionaryUpdate {
	du.mutation.SetCategory(s)
	return du
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (du *DictionaryUpdate) SetNillableCategory(s *string) *DictionaryUpdate {
	if s != nil {
		du.SetCategory(*s)
	}
	return du
}

// SetKey sets the "key" field.
func (du *DictionaryUpdate) SetKey(s string) *DictionaryUpdate {
	du.mutation.SetKey(s)
	return du
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (du *DictionaryUpdate) SetNillableKey(s *string) *DictionaryUpdate {
	if s != nil {
		du.SetKey(*s)
	}
	return du
}

// SetValue sets the "value" field.
func (du *DictionaryUpdate) SetValue(s string) *DictionaryUpdate {
	du.mutation.SetValue(s)
	return du
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (du *DictionaryUpdate) SetNillableValue(s *string) *DictionaryUpdate {
	if s != nil {
		du.SetValue(*s)
	}
	return du
}

// Mutation returns the DictionaryMutation object of the builder.
func (du *DictionaryUpdate) Mutation() *DictionaryMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DictionaryUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DictionaryUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DictionaryUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DictionaryUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DictionaryUpdate) defaults() {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		v := dictionary.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DictionaryUpdate) check() error {
	if v, ok := du.mutation.Category(); ok {
		if err := dictionary.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Dictionary.category": %w`, err)}
		}
	}
	if v, ok := du.mutation.Key(); ok {
		if err := dictionary.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Dictionary.key": %w`, err)}
		}
	}
	if v, ok := du.mutation.Value(); ok {
		if err := dictionary.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Dictionary.value": %w`, err)}
		}
	}
	return nil
}

func (du *DictionaryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dictionary.Table, dictionary.Columns, sqlgraph.NewFieldSpec(dictionary.FieldID, field.TypeUUID))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(dictionary.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.Category(); ok {
		_spec.SetField(dictionary.FieldCategory, field.TypeString, value)
	}
	if value, ok := du.mutation.Key(); ok {
		_spec.SetField(dictionary.FieldKey, field.TypeString, value)
	}
	if value, ok := du.mutation.Value(); ok {
		_spec.SetField(dictionary.FieldValue, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictionary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DictionaryUpdateOne is the builder for updating a single Dictionary entity.
type DictionaryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DictionaryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DictionaryUpdateOne) SetUpdatedAt(t time.Time) *DictionaryUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetCategory sets the "category" field.
func (duo *DictionaryUpdateOne) SetCategory(s string) *DictionaryUpdateOne {
	duo.mutation.SetCategory(s)
	return duo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (duo *DictionaryUpdateOne) SetNillableCategory(s *string) *DictionaryUpdateOne {
	if s != nil {
		duo.SetCategory(*s)
	}
	return duo
}

// SetKey sets the "key" field.
func (duo *DictionaryUpdateOne) SetKey(s string) *DictionaryUpdateOne {
	duo.mutation.SetKey(s)
	return duo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (duo *DictionaryUpdateOne) SetNillableKey(s *string) *DictionaryUpdateOne {
	if s != nil {
		duo.SetKey(*s)
	}
	return duo
}

// SetValue sets the "value" field.
func (duo *DictionaryUpdateOne) SetValue(s string) *DictionaryUpdateOne {
	duo.mutation.SetValue(s)
	return duo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (duo *DictionaryUpdateOne) SetNillableValue(s *string) *DictionaryUpdateOne {
	if s != nil {
		duo.SetValue(*s)
	}
	return duo
}

// Mutation returns the DictionaryMutation object of the builder.
func (duo *DictionaryUpdateOne) Mutation() *DictionaryMutation {
	return duo.mutation
}

// Where appends a list predicates to the DictionaryUpdate builder.
func (duo *DictionaryUpdateOne) Where(ps ...predicate.Dictionary) *DictionaryUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DictionaryUpdateOne) Select(field string, fields ...string) *DictionaryUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Dictionary entity.
func (duo *DictionaryUpdateOne) Save(ctx context.Context) (*Dictionary, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DictionaryUpdateOne) SaveX(ctx context.Context) *Dictionary {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DictionaryUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DictionaryUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DictionaryUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		v := dictionary.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DictionaryUpdateOne) check() error {
	if v, ok := duo.mutation.Category(); ok {
		if err := dictionary.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Dictionary.category": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Key(); ok {
		if err := dictionary.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Dictionary.key": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Value(); ok {
		if err := dictionary.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Dictionary.value": %w`, err)}
		}
	}
	return nil
}

func (duo *DictionaryUpdateOne) sqlSave(ctx context.Context) (_node *Dictionary, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dictionary.Table, dictionary.Columns, sqlgraph.NewFieldSpec(dictionary.FieldID, field.TypeUUID))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dictionary.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dictionary.FieldID)
		for _, f := range fields {
			if !dictionary.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dictionary.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(dictionary.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.Category(); ok {
		_spec.SetField(dictionary.FieldCategory, field.TypeString, value)
	}
	if value, ok := duo.mutation.Key(); ok {
		_spec.SetField(dictionary.FieldKey, field.TypeString, value)
	}
	if value, ok := duo.mutation.Value(); ok {
		_spec.SetField(dictionary.FieldValue, field.TypeString, value)
	}
	_node = &Dictionary{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictionary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}

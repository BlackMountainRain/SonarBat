// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"sonar-bat/ent/host"
	"sonar-bat/ent/schema"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Host is the model entity for the Host schema.
type Host struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy uuid.UUID `json:"updated_by,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// LiveAt holds the value of the "live_at" field.
	LiveAt time.Time `json:"live_at,omitempty"`
	// IsAgentInstalled holds the value of the "is_agent_installed" field.
	IsAgentInstalled bool `json:"is_agent_installed,omitempty"`
	// AgentVersion holds the value of the "agent_version" field.
	AgentVersion string `json:"agent_version,omitempty"`
	// Ips holds the value of the "ips" field.
	Ips []schema.IpWithInfo `json:"ips,omitempty"`
	// NetType holds the value of the "net_type" field.
	NetType int16 `json:"net_type,omitempty"`
	// Additions holds the value of the "additions" field.
	Additions map[string]interface{} `json:"additions,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HostQuery when eager-loading is set.
	Edges        HostEdges `json:"edges"`
	selectValues sql.SelectValues
}

// HostEdges holds the relations/edges for other nodes in the graph.
type HostEdges struct {
	// HostBlacklist holds the value of the host_blacklist edge.
	HostBlacklist []*HostBlacklist `json:"host_blacklist,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HostBlacklistOrErr returns the HostBlacklist value or an error if the edge
// was not loaded in eager-loading.
func (e HostEdges) HostBlacklistOrErr() ([]*HostBlacklist, error) {
	if e.loadedTypes[0] {
		return e.HostBlacklist, nil
	}
	return nil, &NotLoadedError{edge: "host_blacklist"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Host) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case host.FieldIps, host.FieldAdditions:
			values[i] = new([]byte)
		case host.FieldStatus, host.FieldIsAgentInstalled:
			values[i] = new(sql.NullBool)
		case host.FieldNetType:
			values[i] = new(sql.NullInt64)
		case host.FieldName, host.FieldAgentVersion:
			values[i] = new(sql.NullString)
		case host.FieldCreatedAt, host.FieldUpdatedAt, host.FieldLiveAt:
			values[i] = new(sql.NullTime)
		case host.FieldID, host.FieldUpdatedBy, host.FieldCreatedBy:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Host fields.
func (h *Host) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case host.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				h.ID = *value
			}
		case host.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				h.CreatedAt = value.Time
			}
		case host.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				h.UpdatedAt = value.Time
			}
		case host.FieldUpdatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value != nil {
				h.UpdatedBy = *value
			}
		case host.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				h.CreatedBy = *value
			}
		case host.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				h.Status = value.Bool
			}
		case host.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				h.Name = value.String
			}
		case host.FieldLiveAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field live_at", values[i])
			} else if value.Valid {
				h.LiveAt = value.Time
			}
		case host.FieldIsAgentInstalled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_agent_installed", values[i])
			} else if value.Valid {
				h.IsAgentInstalled = value.Bool
			}
		case host.FieldAgentVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent_version", values[i])
			} else if value.Valid {
				h.AgentVersion = value.String
			}
		case host.FieldIps:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ips", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &h.Ips); err != nil {
					return fmt.Errorf("unmarshal field ips: %w", err)
				}
			}
		case host.FieldNetType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field net_type", values[i])
			} else if value.Valid {
				h.NetType = int16(value.Int64)
			}
		case host.FieldAdditions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field additions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &h.Additions); err != nil {
					return fmt.Errorf("unmarshal field additions: %w", err)
				}
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Host.
// This includes values selected through modifiers, order, etc.
func (h *Host) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// QueryHostBlacklist queries the "host_blacklist" edge of the Host entity.
func (h *Host) QueryHostBlacklist() *HostBlacklistQuery {
	return NewHostClient(h.config).QueryHostBlacklist(h)
}

// Update returns a builder for updating this Host.
// Note that you need to call Host.Unwrap() before calling this method if this Host
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Host) Update() *HostUpdateOne {
	return NewHostClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Host entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Host) Unwrap() *Host {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Host is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Host) String() string {
	var builder strings.Builder
	builder.WriteString("Host(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("created_at=")
	builder.WriteString(h.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(h.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", h.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", h.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", h.Status))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(h.Name)
	builder.WriteString(", ")
	builder.WriteString("live_at=")
	builder.WriteString(h.LiveAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_agent_installed=")
	builder.WriteString(fmt.Sprintf("%v", h.IsAgentInstalled))
	builder.WriteString(", ")
	builder.WriteString("agent_version=")
	builder.WriteString(h.AgentVersion)
	builder.WriteString(", ")
	builder.WriteString("ips=")
	builder.WriteString(fmt.Sprintf("%v", h.Ips))
	builder.WriteString(", ")
	builder.WriteString("net_type=")
	builder.WriteString(fmt.Sprintf("%v", h.NetType))
	builder.WriteString(", ")
	builder.WriteString("additions=")
	builder.WriteString(fmt.Sprintf("%v", h.Additions))
	builder.WriteByte(')')
	return builder.String()
}

// Hosts is a parsable slice of Host.
type Hosts []*Host

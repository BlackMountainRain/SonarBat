// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sonar-bat/ent/host"
	"sonar-bat/ent/hostblacklist"
	"sonar-bat/ent/predicate"
	"sonar-bat/ent/schema"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// HostUpdate is the builder for updating Host entities.
type HostUpdate struct {
	config
	hooks    []Hook
	mutation *HostMutation
}

// Where appends a list predicates to the HostUpdate builder.
func (hu *HostUpdate) Where(ps ...predicate.Host) *HostUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetUpdatedAt sets the "updated_at" field.
func (hu *HostUpdate) SetUpdatedAt(t time.Time) *HostUpdate {
	hu.mutation.SetUpdatedAt(t)
	return hu
}

// SetUpdatedBy sets the "updated_by" field.
func (hu *HostUpdate) SetUpdatedBy(u uuid.UUID) *HostUpdate {
	hu.mutation.SetUpdatedBy(u)
	return hu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (hu *HostUpdate) SetNillableUpdatedBy(u *uuid.UUID) *HostUpdate {
	if u != nil {
		hu.SetUpdatedBy(*u)
	}
	return hu
}

// SetCreatedBy sets the "created_by" field.
func (hu *HostUpdate) SetCreatedBy(u uuid.UUID) *HostUpdate {
	hu.mutation.SetCreatedBy(u)
	return hu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (hu *HostUpdate) SetNillableCreatedBy(u *uuid.UUID) *HostUpdate {
	if u != nil {
		hu.SetCreatedBy(*u)
	}
	return hu
}

// SetStatus sets the "status" field.
func (hu *HostUpdate) SetStatus(b bool) *HostUpdate {
	hu.mutation.SetStatus(b)
	return hu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (hu *HostUpdate) SetNillableStatus(b *bool) *HostUpdate {
	if b != nil {
		hu.SetStatus(*b)
	}
	return hu
}

// SetName sets the "name" field.
func (hu *HostUpdate) SetName(s string) *HostUpdate {
	hu.mutation.SetName(s)
	return hu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (hu *HostUpdate) SetNillableName(s *string) *HostUpdate {
	if s != nil {
		hu.SetName(*s)
	}
	return hu
}

// SetLiveAt sets the "live_at" field.
func (hu *HostUpdate) SetLiveAt(t time.Time) *HostUpdate {
	hu.mutation.SetLiveAt(t)
	return hu
}

// SetNillableLiveAt sets the "live_at" field if the given value is not nil.
func (hu *HostUpdate) SetNillableLiveAt(t *time.Time) *HostUpdate {
	if t != nil {
		hu.SetLiveAt(*t)
	}
	return hu
}

// ClearLiveAt clears the value of the "live_at" field.
func (hu *HostUpdate) ClearLiveAt() *HostUpdate {
	hu.mutation.ClearLiveAt()
	return hu
}

// SetIsAgentInstalled sets the "is_agent_installed" field.
func (hu *HostUpdate) SetIsAgentInstalled(b bool) *HostUpdate {
	hu.mutation.SetIsAgentInstalled(b)
	return hu
}

// SetNillableIsAgentInstalled sets the "is_agent_installed" field if the given value is not nil.
func (hu *HostUpdate) SetNillableIsAgentInstalled(b *bool) *HostUpdate {
	if b != nil {
		hu.SetIsAgentInstalled(*b)
	}
	return hu
}

// SetAgentVersion sets the "agent_version" field.
func (hu *HostUpdate) SetAgentVersion(s string) *HostUpdate {
	hu.mutation.SetAgentVersion(s)
	return hu
}

// SetNillableAgentVersion sets the "agent_version" field if the given value is not nil.
func (hu *HostUpdate) SetNillableAgentVersion(s *string) *HostUpdate {
	if s != nil {
		hu.SetAgentVersion(*s)
	}
	return hu
}

// ClearAgentVersion clears the value of the "agent_version" field.
func (hu *HostUpdate) ClearAgentVersion() *HostUpdate {
	hu.mutation.ClearAgentVersion()
	return hu
}

// SetIps sets the "ips" field.
func (hu *HostUpdate) SetIps(swi []schema.IpWithInfo) *HostUpdate {
	hu.mutation.SetIps(swi)
	return hu
}

// AppendIps appends swi to the "ips" field.
func (hu *HostUpdate) AppendIps(swi []schema.IpWithInfo) *HostUpdate {
	hu.mutation.AppendIps(swi)
	return hu
}

// ClearIps clears the value of the "ips" field.
func (hu *HostUpdate) ClearIps() *HostUpdate {
	hu.mutation.ClearIps()
	return hu
}

// SetNetType sets the "net_type" field.
func (hu *HostUpdate) SetNetType(i int16) *HostUpdate {
	hu.mutation.ResetNetType()
	hu.mutation.SetNetType(i)
	return hu
}

// SetNillableNetType sets the "net_type" field if the given value is not nil.
func (hu *HostUpdate) SetNillableNetType(i *int16) *HostUpdate {
	if i != nil {
		hu.SetNetType(*i)
	}
	return hu
}

// AddNetType adds i to the "net_type" field.
func (hu *HostUpdate) AddNetType(i int16) *HostUpdate {
	hu.mutation.AddNetType(i)
	return hu
}

// ClearNetType clears the value of the "net_type" field.
func (hu *HostUpdate) ClearNetType() *HostUpdate {
	hu.mutation.ClearNetType()
	return hu
}

// SetAdditions sets the "additions" field.
func (hu *HostUpdate) SetAdditions(m map[string]interface{}) *HostUpdate {
	hu.mutation.SetAdditions(m)
	return hu
}

// ClearAdditions clears the value of the "additions" field.
func (hu *HostUpdate) ClearAdditions() *HostUpdate {
	hu.mutation.ClearAdditions()
	return hu
}

// AddHostBlacklistIDs adds the "host_blacklist" edge to the HostBlacklist entity by IDs.
func (hu *HostUpdate) AddHostBlacklistIDs(ids ...uuid.UUID) *HostUpdate {
	hu.mutation.AddHostBlacklistIDs(ids...)
	return hu
}

// AddHostBlacklist adds the "host_blacklist" edges to the HostBlacklist entity.
func (hu *HostUpdate) AddHostBlacklist(h ...*HostBlacklist) *HostUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.AddHostBlacklistIDs(ids...)
}

// Mutation returns the HostMutation object of the builder.
func (hu *HostUpdate) Mutation() *HostMutation {
	return hu.mutation
}

// ClearHostBlacklist clears all "host_blacklist" edges to the HostBlacklist entity.
func (hu *HostUpdate) ClearHostBlacklist() *HostUpdate {
	hu.mutation.ClearHostBlacklist()
	return hu
}

// RemoveHostBlacklistIDs removes the "host_blacklist" edge to HostBlacklist entities by IDs.
func (hu *HostUpdate) RemoveHostBlacklistIDs(ids ...uuid.UUID) *HostUpdate {
	hu.mutation.RemoveHostBlacklistIDs(ids...)
	return hu
}

// RemoveHostBlacklist removes "host_blacklist" edges to HostBlacklist entities.
func (hu *HostUpdate) RemoveHostBlacklist(h ...*HostBlacklist) *HostUpdate {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return hu.RemoveHostBlacklistIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HostUpdate) Save(ctx context.Context) (int, error) {
	hu.defaults()
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HostUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HostUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HostUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hu *HostUpdate) defaults() {
	if _, ok := hu.mutation.UpdatedAt(); !ok {
		v := host.UpdateDefaultUpdatedAt()
		hu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HostUpdate) check() error {
	if v, ok := hu.mutation.Name(); ok {
		if err := host.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Host.name": %w`, err)}
		}
	}
	if v, ok := hu.mutation.AgentVersion(); ok {
		if err := host.AgentVersionValidator(v); err != nil {
			return &ValidationError{Name: "agent_version", err: fmt.Errorf(`ent: validator failed for field "Host.agent_version": %w`, err)}
		}
	}
	return nil
}

func (hu *HostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(host.Table, host.Columns, sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.UpdatedAt(); ok {
		_spec.SetField(host.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := hu.mutation.UpdatedBy(); ok {
		_spec.SetField(host.FieldUpdatedBy, field.TypeUUID, value)
	}
	if value, ok := hu.mutation.CreatedBy(); ok {
		_spec.SetField(host.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := hu.mutation.Status(); ok {
		_spec.SetField(host.FieldStatus, field.TypeBool, value)
	}
	if value, ok := hu.mutation.Name(); ok {
		_spec.SetField(host.FieldName, field.TypeString, value)
	}
	if value, ok := hu.mutation.LiveAt(); ok {
		_spec.SetField(host.FieldLiveAt, field.TypeTime, value)
	}
	if hu.mutation.LiveAtCleared() {
		_spec.ClearField(host.FieldLiveAt, field.TypeTime)
	}
	if value, ok := hu.mutation.IsAgentInstalled(); ok {
		_spec.SetField(host.FieldIsAgentInstalled, field.TypeBool, value)
	}
	if value, ok := hu.mutation.AgentVersion(); ok {
		_spec.SetField(host.FieldAgentVersion, field.TypeString, value)
	}
	if hu.mutation.AgentVersionCleared() {
		_spec.ClearField(host.FieldAgentVersion, field.TypeString)
	}
	if value, ok := hu.mutation.Ips(); ok {
		_spec.SetField(host.FieldIps, field.TypeJSON, value)
	}
	if value, ok := hu.mutation.AppendedIps(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, host.FieldIps, value)
		})
	}
	if hu.mutation.IpsCleared() {
		_spec.ClearField(host.FieldIps, field.TypeJSON)
	}
	if value, ok := hu.mutation.NetType(); ok {
		_spec.SetField(host.FieldNetType, field.TypeInt16, value)
	}
	if value, ok := hu.mutation.AddedNetType(); ok {
		_spec.AddField(host.FieldNetType, field.TypeInt16, value)
	}
	if hu.mutation.NetTypeCleared() {
		_spec.ClearField(host.FieldNetType, field.TypeInt16)
	}
	if value, ok := hu.mutation.Additions(); ok {
		_spec.SetField(host.FieldAdditions, field.TypeJSON, value)
	}
	if hu.mutation.AdditionsCleared() {
		_spec.ClearField(host.FieldAdditions, field.TypeJSON)
	}
	if hu.mutation.HostBlacklistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostBlacklistTable,
			Columns: []string{host.HostBlacklistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostblacklist.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.RemovedHostBlacklistIDs(); len(nodes) > 0 && !hu.mutation.HostBlacklistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostBlacklistTable,
			Columns: []string{host.HostBlacklistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostblacklist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.HostBlacklistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostBlacklistTable,
			Columns: []string{host.HostBlacklistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostblacklist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{host.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HostUpdateOne is the builder for updating a single Host entity.
type HostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (huo *HostUpdateOne) SetUpdatedAt(t time.Time) *HostUpdateOne {
	huo.mutation.SetUpdatedAt(t)
	return huo
}

// SetUpdatedBy sets the "updated_by" field.
func (huo *HostUpdateOne) SetUpdatedBy(u uuid.UUID) *HostUpdateOne {
	huo.mutation.SetUpdatedBy(u)
	return huo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableUpdatedBy(u *uuid.UUID) *HostUpdateOne {
	if u != nil {
		huo.SetUpdatedBy(*u)
	}
	return huo
}

// SetCreatedBy sets the "created_by" field.
func (huo *HostUpdateOne) SetCreatedBy(u uuid.UUID) *HostUpdateOne {
	huo.mutation.SetCreatedBy(u)
	return huo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *HostUpdateOne {
	if u != nil {
		huo.SetCreatedBy(*u)
	}
	return huo
}

// SetStatus sets the "status" field.
func (huo *HostUpdateOne) SetStatus(b bool) *HostUpdateOne {
	huo.mutation.SetStatus(b)
	return huo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableStatus(b *bool) *HostUpdateOne {
	if b != nil {
		huo.SetStatus(*b)
	}
	return huo
}

// SetName sets the "name" field.
func (huo *HostUpdateOne) SetName(s string) *HostUpdateOne {
	huo.mutation.SetName(s)
	return huo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableName(s *string) *HostUpdateOne {
	if s != nil {
		huo.SetName(*s)
	}
	return huo
}

// SetLiveAt sets the "live_at" field.
func (huo *HostUpdateOne) SetLiveAt(t time.Time) *HostUpdateOne {
	huo.mutation.SetLiveAt(t)
	return huo
}

// SetNillableLiveAt sets the "live_at" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableLiveAt(t *time.Time) *HostUpdateOne {
	if t != nil {
		huo.SetLiveAt(*t)
	}
	return huo
}

// ClearLiveAt clears the value of the "live_at" field.
func (huo *HostUpdateOne) ClearLiveAt() *HostUpdateOne {
	huo.mutation.ClearLiveAt()
	return huo
}

// SetIsAgentInstalled sets the "is_agent_installed" field.
func (huo *HostUpdateOne) SetIsAgentInstalled(b bool) *HostUpdateOne {
	huo.mutation.SetIsAgentInstalled(b)
	return huo
}

// SetNillableIsAgentInstalled sets the "is_agent_installed" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableIsAgentInstalled(b *bool) *HostUpdateOne {
	if b != nil {
		huo.SetIsAgentInstalled(*b)
	}
	return huo
}

// SetAgentVersion sets the "agent_version" field.
func (huo *HostUpdateOne) SetAgentVersion(s string) *HostUpdateOne {
	huo.mutation.SetAgentVersion(s)
	return huo
}

// SetNillableAgentVersion sets the "agent_version" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableAgentVersion(s *string) *HostUpdateOne {
	if s != nil {
		huo.SetAgentVersion(*s)
	}
	return huo
}

// ClearAgentVersion clears the value of the "agent_version" field.
func (huo *HostUpdateOne) ClearAgentVersion() *HostUpdateOne {
	huo.mutation.ClearAgentVersion()
	return huo
}

// SetIps sets the "ips" field.
func (huo *HostUpdateOne) SetIps(swi []schema.IpWithInfo) *HostUpdateOne {
	huo.mutation.SetIps(swi)
	return huo
}

// AppendIps appends swi to the "ips" field.
func (huo *HostUpdateOne) AppendIps(swi []schema.IpWithInfo) *HostUpdateOne {
	huo.mutation.AppendIps(swi)
	return huo
}

// ClearIps clears the value of the "ips" field.
func (huo *HostUpdateOne) ClearIps() *HostUpdateOne {
	huo.mutation.ClearIps()
	return huo
}

// SetNetType sets the "net_type" field.
func (huo *HostUpdateOne) SetNetType(i int16) *HostUpdateOne {
	huo.mutation.ResetNetType()
	huo.mutation.SetNetType(i)
	return huo
}

// SetNillableNetType sets the "net_type" field if the given value is not nil.
func (huo *HostUpdateOne) SetNillableNetType(i *int16) *HostUpdateOne {
	if i != nil {
		huo.SetNetType(*i)
	}
	return huo
}

// AddNetType adds i to the "net_type" field.
func (huo *HostUpdateOne) AddNetType(i int16) *HostUpdateOne {
	huo.mutation.AddNetType(i)
	return huo
}

// ClearNetType clears the value of the "net_type" field.
func (huo *HostUpdateOne) ClearNetType() *HostUpdateOne {
	huo.mutation.ClearNetType()
	return huo
}

// SetAdditions sets the "additions" field.
func (huo *HostUpdateOne) SetAdditions(m map[string]interface{}) *HostUpdateOne {
	huo.mutation.SetAdditions(m)
	return huo
}

// ClearAdditions clears the value of the "additions" field.
func (huo *HostUpdateOne) ClearAdditions() *HostUpdateOne {
	huo.mutation.ClearAdditions()
	return huo
}

// AddHostBlacklistIDs adds the "host_blacklist" edge to the HostBlacklist entity by IDs.
func (huo *HostUpdateOne) AddHostBlacklistIDs(ids ...uuid.UUID) *HostUpdateOne {
	huo.mutation.AddHostBlacklistIDs(ids...)
	return huo
}

// AddHostBlacklist adds the "host_blacklist" edges to the HostBlacklist entity.
func (huo *HostUpdateOne) AddHostBlacklist(h ...*HostBlacklist) *HostUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.AddHostBlacklistIDs(ids...)
}

// Mutation returns the HostMutation object of the builder.
func (huo *HostUpdateOne) Mutation() *HostMutation {
	return huo.mutation
}

// ClearHostBlacklist clears all "host_blacklist" edges to the HostBlacklist entity.
func (huo *HostUpdateOne) ClearHostBlacklist() *HostUpdateOne {
	huo.mutation.ClearHostBlacklist()
	return huo
}

// RemoveHostBlacklistIDs removes the "host_blacklist" edge to HostBlacklist entities by IDs.
func (huo *HostUpdateOne) RemoveHostBlacklistIDs(ids ...uuid.UUID) *HostUpdateOne {
	huo.mutation.RemoveHostBlacklistIDs(ids...)
	return huo
}

// RemoveHostBlacklist removes "host_blacklist" edges to HostBlacklist entities.
func (huo *HostUpdateOne) RemoveHostBlacklist(h ...*HostBlacklist) *HostUpdateOne {
	ids := make([]uuid.UUID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return huo.RemoveHostBlacklistIDs(ids...)
}

// Where appends a list predicates to the HostUpdate builder.
func (huo *HostUpdateOne) Where(ps ...predicate.Host) *HostUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HostUpdateOne) Select(field string, fields ...string) *HostUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Host entity.
func (huo *HostUpdateOne) Save(ctx context.Context) (*Host, error) {
	huo.defaults()
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HostUpdateOne) SaveX(ctx context.Context) *Host {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HostUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HostUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (huo *HostUpdateOne) defaults() {
	if _, ok := huo.mutation.UpdatedAt(); !ok {
		v := host.UpdateDefaultUpdatedAt()
		huo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HostUpdateOne) check() error {
	if v, ok := huo.mutation.Name(); ok {
		if err := host.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Host.name": %w`, err)}
		}
	}
	if v, ok := huo.mutation.AgentVersion(); ok {
		if err := host.AgentVersionValidator(v); err != nil {
			return &ValidationError{Name: "agent_version", err: fmt.Errorf(`ent: validator failed for field "Host.agent_version": %w`, err)}
		}
	}
	return nil
}

func (huo *HostUpdateOne) sqlSave(ctx context.Context) (_node *Host, err error) {
	if err := huo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(host.Table, host.Columns, sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Host.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, host.FieldID)
		for _, f := range fields {
			if !host.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != host.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.UpdatedAt(); ok {
		_spec.SetField(host.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := huo.mutation.UpdatedBy(); ok {
		_spec.SetField(host.FieldUpdatedBy, field.TypeUUID, value)
	}
	if value, ok := huo.mutation.CreatedBy(); ok {
		_spec.SetField(host.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := huo.mutation.Status(); ok {
		_spec.SetField(host.FieldStatus, field.TypeBool, value)
	}
	if value, ok := huo.mutation.Name(); ok {
		_spec.SetField(host.FieldName, field.TypeString, value)
	}
	if value, ok := huo.mutation.LiveAt(); ok {
		_spec.SetField(host.FieldLiveAt, field.TypeTime, value)
	}
	if huo.mutation.LiveAtCleared() {
		_spec.ClearField(host.FieldLiveAt, field.TypeTime)
	}
	if value, ok := huo.mutation.IsAgentInstalled(); ok {
		_spec.SetField(host.FieldIsAgentInstalled, field.TypeBool, value)
	}
	if value, ok := huo.mutation.AgentVersion(); ok {
		_spec.SetField(host.FieldAgentVersion, field.TypeString, value)
	}
	if huo.mutation.AgentVersionCleared() {
		_spec.ClearField(host.FieldAgentVersion, field.TypeString)
	}
	if value, ok := huo.mutation.Ips(); ok {
		_spec.SetField(host.FieldIps, field.TypeJSON, value)
	}
	if value, ok := huo.mutation.AppendedIps(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, host.FieldIps, value)
		})
	}
	if huo.mutation.IpsCleared() {
		_spec.ClearField(host.FieldIps, field.TypeJSON)
	}
	if value, ok := huo.mutation.NetType(); ok {
		_spec.SetField(host.FieldNetType, field.TypeInt16, value)
	}
	if value, ok := huo.mutation.AddedNetType(); ok {
		_spec.AddField(host.FieldNetType, field.TypeInt16, value)
	}
	if huo.mutation.NetTypeCleared() {
		_spec.ClearField(host.FieldNetType, field.TypeInt16)
	}
	if value, ok := huo.mutation.Additions(); ok {
		_spec.SetField(host.FieldAdditions, field.TypeJSON, value)
	}
	if huo.mutation.AdditionsCleared() {
		_spec.ClearField(host.FieldAdditions, field.TypeJSON)
	}
	if huo.mutation.HostBlacklistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostBlacklistTable,
			Columns: []string{host.HostBlacklistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostblacklist.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.RemovedHostBlacklistIDs(); len(nodes) > 0 && !huo.mutation.HostBlacklistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostBlacklistTable,
			Columns: []string{host.HostBlacklistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostblacklist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.HostBlacklistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   host.HostBlacklistTable,
			Columns: []string{host.HostBlacklistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostblacklist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Host{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{host.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}

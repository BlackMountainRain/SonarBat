// Code generated by ent, DO NOT EDIT.

package hostblacklist

import (
	"sonar-bat/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldEQ(FieldCreatedBy, v))
}

// HostID applies equality check predicate on the "host_id" field. It's identical to HostIDEQ.
func HostID(v uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldEQ(FieldHostID, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldEQ(FieldReason, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldLTE(FieldCreatedBy, v))
}

// HostIDEQ applies the EQ predicate on the "host_id" field.
func HostIDEQ(v uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldEQ(FieldHostID, v))
}

// HostIDNEQ applies the NEQ predicate on the "host_id" field.
func HostIDNEQ(v uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldNEQ(FieldHostID, v))
}

// HostIDIn applies the In predicate on the "host_id" field.
func HostIDIn(vs ...uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldIn(FieldHostID, vs...))
}

// HostIDNotIn applies the NotIn predicate on the "host_id" field.
func HostIDNotIn(vs ...uuid.UUID) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldNotIn(FieldHostID, vs...))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.FieldContainsFold(FieldReason, v))
}

// HasHost applies the HasEdge predicate on the "host" edge.
func HasHost() predicate.HostBlacklist {
	return predicate.HostBlacklist(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HostTable, HostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHostWith applies the HasEdge predicate on the "host" edge with a given conditions (other predicates).
func HasHostWith(preds ...predicate.Host) predicate.HostBlacklist {
	return predicate.HostBlacklist(func(s *sql.Selector) {
		step := newHostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HostBlacklist) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HostBlacklist) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HostBlacklist) predicate.HostBlacklist {
	return predicate.HostBlacklist(sql.NotPredicates(p))
}

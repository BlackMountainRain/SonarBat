// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sonar-bat/ent/host"
	"sonar-bat/ent/hostblacklist"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// HostBlacklistCreate is the builder for creating a HostBlacklist entity.
type HostBlacklistCreate struct {
	config
	mutation *HostBlacklistMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (hbc *HostBlacklistCreate) SetCreatedAt(t time.Time) *HostBlacklistCreate {
	hbc.mutation.SetCreatedAt(t)
	return hbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hbc *HostBlacklistCreate) SetNillableCreatedAt(t *time.Time) *HostBlacklistCreate {
	if t != nil {
		hbc.SetCreatedAt(*t)
	}
	return hbc
}

// SetUpdatedAt sets the "updated_at" field.
func (hbc *HostBlacklistCreate) SetUpdatedAt(t time.Time) *HostBlacklistCreate {
	hbc.mutation.SetUpdatedAt(t)
	return hbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hbc *HostBlacklistCreate) SetNillableUpdatedAt(t *time.Time) *HostBlacklistCreate {
	if t != nil {
		hbc.SetUpdatedAt(*t)
	}
	return hbc
}

// SetUpdatedBy sets the "updated_by" field.
func (hbc *HostBlacklistCreate) SetUpdatedBy(u uuid.UUID) *HostBlacklistCreate {
	hbc.mutation.SetUpdatedBy(u)
	return hbc
}

// SetCreatedBy sets the "created_by" field.
func (hbc *HostBlacklistCreate) SetCreatedBy(u uuid.UUID) *HostBlacklistCreate {
	hbc.mutation.SetCreatedBy(u)
	return hbc
}

// SetHostID sets the "host_id" field.
func (hbc *HostBlacklistCreate) SetHostID(u uuid.UUID) *HostBlacklistCreate {
	hbc.mutation.SetHostID(u)
	return hbc
}

// SetReason sets the "reason" field.
func (hbc *HostBlacklistCreate) SetReason(s string) *HostBlacklistCreate {
	hbc.mutation.SetReason(s)
	return hbc
}

// SetID sets the "id" field.
func (hbc *HostBlacklistCreate) SetID(u uuid.UUID) *HostBlacklistCreate {
	hbc.mutation.SetID(u)
	return hbc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (hbc *HostBlacklistCreate) SetNillableID(u *uuid.UUID) *HostBlacklistCreate {
	if u != nil {
		hbc.SetID(*u)
	}
	return hbc
}

// SetHost sets the "host" edge to the Host entity.
func (hbc *HostBlacklistCreate) SetHost(h *Host) *HostBlacklistCreate {
	return hbc.SetHostID(h.ID)
}

// Mutation returns the HostBlacklistMutation object of the builder.
func (hbc *HostBlacklistCreate) Mutation() *HostBlacklistMutation {
	return hbc.mutation
}

// Save creates the HostBlacklist in the database.
func (hbc *HostBlacklistCreate) Save(ctx context.Context) (*HostBlacklist, error) {
	hbc.defaults()
	return withHooks(ctx, hbc.sqlSave, hbc.mutation, hbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hbc *HostBlacklistCreate) SaveX(ctx context.Context) *HostBlacklist {
	v, err := hbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hbc *HostBlacklistCreate) Exec(ctx context.Context) error {
	_, err := hbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hbc *HostBlacklistCreate) ExecX(ctx context.Context) {
	if err := hbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hbc *HostBlacklistCreate) defaults() {
	if _, ok := hbc.mutation.CreatedAt(); !ok {
		v := hostblacklist.DefaultCreatedAt()
		hbc.mutation.SetCreatedAt(v)
	}
	if _, ok := hbc.mutation.UpdatedAt(); !ok {
		v := hostblacklist.DefaultUpdatedAt()
		hbc.mutation.SetUpdatedAt(v)
	}
	if _, ok := hbc.mutation.ID(); !ok {
		v := hostblacklist.DefaultID()
		hbc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hbc *HostBlacklistCreate) check() error {
	if _, ok := hbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "HostBlacklist.created_at"`)}
	}
	if _, ok := hbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "HostBlacklist.updated_at"`)}
	}
	if _, ok := hbc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "HostBlacklist.updated_by"`)}
	}
	if _, ok := hbc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "HostBlacklist.created_by"`)}
	}
	if _, ok := hbc.mutation.HostID(); !ok {
		return &ValidationError{Name: "host_id", err: errors.New(`ent: missing required field "HostBlacklist.host_id"`)}
	}
	if _, ok := hbc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "HostBlacklist.reason"`)}
	}
	if v, ok := hbc.mutation.Reason(); ok {
		if err := hostblacklist.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "HostBlacklist.reason": %w`, err)}
		}
	}
	if _, ok := hbc.mutation.HostID(); !ok {
		return &ValidationError{Name: "host", err: errors.New(`ent: missing required edge "HostBlacklist.host"`)}
	}
	return nil
}

func (hbc *HostBlacklistCreate) sqlSave(ctx context.Context) (*HostBlacklist, error) {
	if err := hbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	hbc.mutation.id = &_node.ID
	hbc.mutation.done = true
	return _node, nil
}

func (hbc *HostBlacklistCreate) createSpec() (*HostBlacklist, *sqlgraph.CreateSpec) {
	var (
		_node = &HostBlacklist{config: hbc.config}
		_spec = sqlgraph.NewCreateSpec(hostblacklist.Table, sqlgraph.NewFieldSpec(hostblacklist.FieldID, field.TypeUUID))
	)
	if id, ok := hbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := hbc.mutation.CreatedAt(); ok {
		_spec.SetField(hostblacklist.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hbc.mutation.UpdatedAt(); ok {
		_spec.SetField(hostblacklist.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hbc.mutation.UpdatedBy(); ok {
		_spec.SetField(hostblacklist.FieldUpdatedBy, field.TypeUUID, value)
		_node.UpdatedBy = value
	}
	if value, ok := hbc.mutation.CreatedBy(); ok {
		_spec.SetField(hostblacklist.FieldCreatedBy, field.TypeUUID, value)
		_node.CreatedBy = value
	}
	if value, ok := hbc.mutation.Reason(); ok {
		_spec.SetField(hostblacklist.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if nodes := hbc.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostblacklist.HostTable,
			Columns: []string{hostblacklist.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.HostID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HostBlacklistCreateBulk is the builder for creating many HostBlacklist entities in bulk.
type HostBlacklistCreateBulk struct {
	config
	err      error
	builders []*HostBlacklistCreate
}

// Save creates the HostBlacklist entities in the database.
func (hbcb *HostBlacklistCreateBulk) Save(ctx context.Context) ([]*HostBlacklist, error) {
	if hbcb.err != nil {
		return nil, hbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hbcb.builders))
	nodes := make([]*HostBlacklist, len(hbcb.builders))
	mutators := make([]Mutator, len(hbcb.builders))
	for i := range hbcb.builders {
		func(i int, root context.Context) {
			builder := hbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HostBlacklistMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hbcb *HostBlacklistCreateBulk) SaveX(ctx context.Context) []*HostBlacklist {
	v, err := hbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hbcb *HostBlacklistCreateBulk) Exec(ctx context.Context) error {
	_, err := hbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hbcb *HostBlacklistCreateBulk) ExecX(ctx context.Context) {
	if err := hbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

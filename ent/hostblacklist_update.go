// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sonar-bat/ent/host"
	"sonar-bat/ent/hostblacklist"
	"sonar-bat/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// HostBlacklistUpdate is the builder for updating HostBlacklist entities.
type HostBlacklistUpdate struct {
	config
	hooks    []Hook
	mutation *HostBlacklistMutation
}

// Where appends a list predicates to the HostBlacklistUpdate builder.
func (hbu *HostBlacklistUpdate) Where(ps ...predicate.HostBlacklist) *HostBlacklistUpdate {
	hbu.mutation.Where(ps...)
	return hbu
}

// SetUpdatedAt sets the "updated_at" field.
func (hbu *HostBlacklistUpdate) SetUpdatedAt(t time.Time) *HostBlacklistUpdate {
	hbu.mutation.SetUpdatedAt(t)
	return hbu
}

// SetUpdatedBy sets the "updated_by" field.
func (hbu *HostBlacklistUpdate) SetUpdatedBy(u uuid.UUID) *HostBlacklistUpdate {
	hbu.mutation.SetUpdatedBy(u)
	return hbu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (hbu *HostBlacklistUpdate) SetNillableUpdatedBy(u *uuid.UUID) *HostBlacklistUpdate {
	if u != nil {
		hbu.SetUpdatedBy(*u)
	}
	return hbu
}

// SetCreatedBy sets the "created_by" field.
func (hbu *HostBlacklistUpdate) SetCreatedBy(u uuid.UUID) *HostBlacklistUpdate {
	hbu.mutation.SetCreatedBy(u)
	return hbu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (hbu *HostBlacklistUpdate) SetNillableCreatedBy(u *uuid.UUID) *HostBlacklistUpdate {
	if u != nil {
		hbu.SetCreatedBy(*u)
	}
	return hbu
}

// SetHostID sets the "host_id" field.
func (hbu *HostBlacklistUpdate) SetHostID(u uuid.UUID) *HostBlacklistUpdate {
	hbu.mutation.SetHostID(u)
	return hbu
}

// SetNillableHostID sets the "host_id" field if the given value is not nil.
func (hbu *HostBlacklistUpdate) SetNillableHostID(u *uuid.UUID) *HostBlacklistUpdate {
	if u != nil {
		hbu.SetHostID(*u)
	}
	return hbu
}

// SetReason sets the "reason" field.
func (hbu *HostBlacklistUpdate) SetReason(s string) *HostBlacklistUpdate {
	hbu.mutation.SetReason(s)
	return hbu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (hbu *HostBlacklistUpdate) SetNillableReason(s *string) *HostBlacklistUpdate {
	if s != nil {
		hbu.SetReason(*s)
	}
	return hbu
}

// SetHost sets the "host" edge to the Host entity.
func (hbu *HostBlacklistUpdate) SetHost(h *Host) *HostBlacklistUpdate {
	return hbu.SetHostID(h.ID)
}

// Mutation returns the HostBlacklistMutation object of the builder.
func (hbu *HostBlacklistUpdate) Mutation() *HostBlacklistMutation {
	return hbu.mutation
}

// ClearHost clears the "host" edge to the Host entity.
func (hbu *HostBlacklistUpdate) ClearHost() *HostBlacklistUpdate {
	hbu.mutation.ClearHost()
	return hbu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hbu *HostBlacklistUpdate) Save(ctx context.Context) (int, error) {
	hbu.defaults()
	return withHooks(ctx, hbu.sqlSave, hbu.mutation, hbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hbu *HostBlacklistUpdate) SaveX(ctx context.Context) int {
	affected, err := hbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hbu *HostBlacklistUpdate) Exec(ctx context.Context) error {
	_, err := hbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hbu *HostBlacklistUpdate) ExecX(ctx context.Context) {
	if err := hbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hbu *HostBlacklistUpdate) defaults() {
	if _, ok := hbu.mutation.UpdatedAt(); !ok {
		v := hostblacklist.UpdateDefaultUpdatedAt()
		hbu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hbu *HostBlacklistUpdate) check() error {
	if v, ok := hbu.mutation.Reason(); ok {
		if err := hostblacklist.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "HostBlacklist.reason": %w`, err)}
		}
	}
	if _, ok := hbu.mutation.HostID(); hbu.mutation.HostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HostBlacklist.host"`)
	}
	return nil
}

func (hbu *HostBlacklistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostblacklist.Table, hostblacklist.Columns, sqlgraph.NewFieldSpec(hostblacklist.FieldID, field.TypeUUID))
	if ps := hbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hbu.mutation.UpdatedAt(); ok {
		_spec.SetField(hostblacklist.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := hbu.mutation.UpdatedBy(); ok {
		_spec.SetField(hostblacklist.FieldUpdatedBy, field.TypeUUID, value)
	}
	if value, ok := hbu.mutation.CreatedBy(); ok {
		_spec.SetField(hostblacklist.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := hbu.mutation.Reason(); ok {
		_spec.SetField(hostblacklist.FieldReason, field.TypeString, value)
	}
	if hbu.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostblacklist.HostTable,
			Columns: []string{hostblacklist.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hbu.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostblacklist.HostTable,
			Columns: []string{hostblacklist.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostblacklist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hbu.mutation.done = true
	return n, nil
}

// HostBlacklistUpdateOne is the builder for updating a single HostBlacklist entity.
type HostBlacklistUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostBlacklistMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (hbuo *HostBlacklistUpdateOne) SetUpdatedAt(t time.Time) *HostBlacklistUpdateOne {
	hbuo.mutation.SetUpdatedAt(t)
	return hbuo
}

// SetUpdatedBy sets the "updated_by" field.
func (hbuo *HostBlacklistUpdateOne) SetUpdatedBy(u uuid.UUID) *HostBlacklistUpdateOne {
	hbuo.mutation.SetUpdatedBy(u)
	return hbuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (hbuo *HostBlacklistUpdateOne) SetNillableUpdatedBy(u *uuid.UUID) *HostBlacklistUpdateOne {
	if u != nil {
		hbuo.SetUpdatedBy(*u)
	}
	return hbuo
}

// SetCreatedBy sets the "created_by" field.
func (hbuo *HostBlacklistUpdateOne) SetCreatedBy(u uuid.UUID) *HostBlacklistUpdateOne {
	hbuo.mutation.SetCreatedBy(u)
	return hbuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (hbuo *HostBlacklistUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *HostBlacklistUpdateOne {
	if u != nil {
		hbuo.SetCreatedBy(*u)
	}
	return hbuo
}

// SetHostID sets the "host_id" field.
func (hbuo *HostBlacklistUpdateOne) SetHostID(u uuid.UUID) *HostBlacklistUpdateOne {
	hbuo.mutation.SetHostID(u)
	return hbuo
}

// SetNillableHostID sets the "host_id" field if the given value is not nil.
func (hbuo *HostBlacklistUpdateOne) SetNillableHostID(u *uuid.UUID) *HostBlacklistUpdateOne {
	if u != nil {
		hbuo.SetHostID(*u)
	}
	return hbuo
}

// SetReason sets the "reason" field.
func (hbuo *HostBlacklistUpdateOne) SetReason(s string) *HostBlacklistUpdateOne {
	hbuo.mutation.SetReason(s)
	return hbuo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (hbuo *HostBlacklistUpdateOne) SetNillableReason(s *string) *HostBlacklistUpdateOne {
	if s != nil {
		hbuo.SetReason(*s)
	}
	return hbuo
}

// SetHost sets the "host" edge to the Host entity.
func (hbuo *HostBlacklistUpdateOne) SetHost(h *Host) *HostBlacklistUpdateOne {
	return hbuo.SetHostID(h.ID)
}

// Mutation returns the HostBlacklistMutation object of the builder.
func (hbuo *HostBlacklistUpdateOne) Mutation() *HostBlacklistMutation {
	return hbuo.mutation
}

// ClearHost clears the "host" edge to the Host entity.
func (hbuo *HostBlacklistUpdateOne) ClearHost() *HostBlacklistUpdateOne {
	hbuo.mutation.ClearHost()
	return hbuo
}

// Where appends a list predicates to the HostBlacklistUpdate builder.
func (hbuo *HostBlacklistUpdateOne) Where(ps ...predicate.HostBlacklist) *HostBlacklistUpdateOne {
	hbuo.mutation.Where(ps...)
	return hbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hbuo *HostBlacklistUpdateOne) Select(field string, fields ...string) *HostBlacklistUpdateOne {
	hbuo.fields = append([]string{field}, fields...)
	return hbuo
}

// Save executes the query and returns the updated HostBlacklist entity.
func (hbuo *HostBlacklistUpdateOne) Save(ctx context.Context) (*HostBlacklist, error) {
	hbuo.defaults()
	return withHooks(ctx, hbuo.sqlSave, hbuo.mutation, hbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hbuo *HostBlacklistUpdateOne) SaveX(ctx context.Context) *HostBlacklist {
	node, err := hbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hbuo *HostBlacklistUpdateOne) Exec(ctx context.Context) error {
	_, err := hbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hbuo *HostBlacklistUpdateOne) ExecX(ctx context.Context) {
	if err := hbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hbuo *HostBlacklistUpdateOne) defaults() {
	if _, ok := hbuo.mutation.UpdatedAt(); !ok {
		v := hostblacklist.UpdateDefaultUpdatedAt()
		hbuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hbuo *HostBlacklistUpdateOne) check() error {
	if v, ok := hbuo.mutation.Reason(); ok {
		if err := hostblacklist.ReasonValidator(v); err != nil {
			return &ValidationError{Name: "reason", err: fmt.Errorf(`ent: validator failed for field "HostBlacklist.reason": %w`, err)}
		}
	}
	if _, ok := hbuo.mutation.HostID(); hbuo.mutation.HostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "HostBlacklist.host"`)
	}
	return nil
}

func (hbuo *HostBlacklistUpdateOne) sqlSave(ctx context.Context) (_node *HostBlacklist, err error) {
	if err := hbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostblacklist.Table, hostblacklist.Columns, sqlgraph.NewFieldSpec(hostblacklist.FieldID, field.TypeUUID))
	id, ok := hbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HostBlacklist.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hostblacklist.FieldID)
		for _, f := range fields {
			if !hostblacklist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hostblacklist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hbuo.mutation.UpdatedAt(); ok {
		_spec.SetField(hostblacklist.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := hbuo.mutation.UpdatedBy(); ok {
		_spec.SetField(hostblacklist.FieldUpdatedBy, field.TypeUUID, value)
	}
	if value, ok := hbuo.mutation.CreatedBy(); ok {
		_spec.SetField(hostblacklist.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := hbuo.mutation.Reason(); ok {
		_spec.SetField(hostblacklist.FieldReason, field.TypeString, value)
	}
	if hbuo.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostblacklist.HostTable,
			Columns: []string{hostblacklist.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hbuo.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hostblacklist.HostTable,
			Columns: []string{hostblacklist.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(host.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HostBlacklist{config: hbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostblacklist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hbuo.mutation.done = true
	return _node, nil
}

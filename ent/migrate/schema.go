// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DictionariesColumns holds the columns for the "dictionaries" table.
	DictionariesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "category", Type: field.TypeString, Size: 20},
		{Name: "key", Type: field.TypeString, Size: 20},
		{Name: "value", Type: field.TypeString, Size: 100},
	}
	// DictionariesTable holds the schema information for the "dictionaries" table.
	DictionariesTable = &schema.Table{
		Name:       "dictionaries",
		Columns:    DictionariesColumns,
		PrimaryKey: []*schema.Column{DictionariesColumns[0]},
	}
	// HostsColumns holds the columns for the "hosts" table.
	HostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeBool, Default: true},
		{Name: "name", Type: field.TypeString, Size: 250},
		{Name: "live_at", Type: field.TypeTime, Nullable: true},
		{Name: "is_agent_installed", Type: field.TypeBool, Default: false},
		{Name: "agent_version", Type: field.TypeString, Nullable: true, Size: 10},
		{Name: "ips", Type: field.TypeJSON, Nullable: true},
		{Name: "net_type", Type: field.TypeInt16, Nullable: true},
		{Name: "additions", Type: field.TypeJSON, Nullable: true},
	}
	// HostsTable holds the schema information for the "hosts" table.
	HostsTable = &schema.Table{
		Name:       "hosts",
		Columns:    HostsColumns,
		PrimaryKey: []*schema.Column{HostsColumns[0]},
	}
	// HostBlacklistsColumns holds the columns for the "host_blacklists" table.
	HostBlacklistsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "updated_by", Type: field.TypeUUID},
		{Name: "created_by", Type: field.TypeUUID},
		{Name: "reason", Type: field.TypeString, Size: 50},
		{Name: "host_id", Type: field.TypeUUID},
	}
	// HostBlacklistsTable holds the schema information for the "host_blacklists" table.
	HostBlacklistsTable = &schema.Table{
		Name:       "host_blacklists",
		Columns:    HostBlacklistsColumns,
		PrimaryKey: []*schema.Column{HostBlacklistsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "host_blacklists_hosts_host_blacklist",
				Columns:    []*schema.Column{HostBlacklistsColumns[6]},
				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// RbacObjectsColumns holds the columns for the "rbac_objects" table.
	RbacObjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "updated_by", Type: field.TypeUUID},
		{Name: "created_by", Type: field.TypeUUID},
		{Name: "status", Type: field.TypeBool, Default: true},
		{Name: "value", Type: field.TypeString, Size: 50},
	}
	// RbacObjectsTable holds the schema information for the "rbac_objects" table.
	RbacObjectsTable = &schema.Table{
		Name:       "rbac_objects",
		Columns:    RbacObjectsColumns,
		PrimaryKey: []*schema.Column{RbacObjectsColumns[0]},
	}
	// RbacPoliciesColumns holds the columns for the "rbac_policies" table.
	RbacPoliciesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "updated_by", Type: field.TypeUUID},
		{Name: "created_by", Type: field.TypeUUID},
		{Name: "role", Type: field.TypeString, Nullable: true, Size: 20},
		{Name: "obj", Type: field.TypeString, Nullable: true, Size: 20},
		{Name: "act", Type: field.TypeString, Nullable: true, Size: 20},
		{Name: "uri", Type: field.TypeString, Nullable: true, Size: 20},
	}
	// RbacPoliciesTable holds the schema information for the "rbac_policies" table.
	RbacPoliciesTable = &schema.Table{
		Name:       "rbac_policies",
		Columns:    RbacPoliciesColumns,
		PrimaryKey: []*schema.Column{RbacPoliciesColumns[0]},
	}
	// RbacRolesColumns holds the columns for the "rbac_roles" table.
	RbacRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "updated_by", Type: field.TypeUUID},
		{Name: "created_by", Type: field.TypeUUID},
		{Name: "status", Type: field.TypeBool, Default: true},
		{Name: "name", Type: field.TypeString, Size: 20},
		{Name: "description", Type: field.TypeString, Size: 255, Default: ""},
	}
	// RbacRolesTable holds the schema information for the "rbac_roles" table.
	RbacRolesTable = &schema.Table{
		Name:       "rbac_roles",
		Columns:    RbacRolesColumns,
		PrimaryKey: []*schema.Column{RbacRolesColumns[0]},
	}
	// SubtasksColumns holds the columns for the "subtasks" table.
	SubtasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "updated_by", Type: field.TypeUUID},
		{Name: "created_by", Type: field.TypeUUID},
		{Name: "status", Type: field.TypeBool, Default: true},
		{Name: "detection_type", Type: field.TypeInt16},
		{Name: "params", Type: field.TypeJSON},
		{Name: "src_ep_filter_strategy", Type: field.TypeJSON},
		{Name: "src_ep_sel_strategy", Type: field.TypeJSON},
		{Name: "src_ep_sel_num", Type: field.TypeInt},
		{Name: "dst_ep_filter_strategy", Type: field.TypeJSON},
		{Name: "dst_ep_sel_strategy", Type: field.TypeJSON},
		{Name: "dst_ep_sel_num", Type: field.TypeInt},
		{Name: "task_id", Type: field.TypeUUID},
	}
	// SubtasksTable holds the schema information for the "subtasks" table.
	SubtasksTable = &schema.Table{
		Name:       "subtasks",
		Columns:    SubtasksColumns,
		PrimaryKey: []*schema.Column{SubtasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "subtasks_tasks_subtasks",
				Columns:    []*schema.Column{SubtasksColumns[14]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TasksColumns holds the columns for the "tasks" table.
	TasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "updated_by", Type: field.TypeUUID},
		{Name: "created_by", Type: field.TypeUUID},
		{Name: "status", Type: field.TypeBool, Default: true},
		{Name: "name", Type: field.TypeString, Size: 100},
		{Name: "comment", Type: field.TypeString, Size: 255, Default: ""},
	}
	// TasksTable holds the schema information for the "tasks" table.
	TasksTable = &schema.Table{
		Name:       "tasks",
		Columns:    TasksColumns,
		PrimaryKey: []*schema.Column{TasksColumns[0]},
	}
	// TokensColumns holds the columns for the "tokens" table.
	TokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "updated_by", Type: field.TypeUUID},
		{Name: "created_by", Type: field.TypeUUID},
		{Name: "status", Type: field.TypeBool, Default: true},
		{Name: "name", Type: field.TypeString, Size: 20},
		{Name: "remark", Type: field.TypeString, Size: 200, Default: ""},
		{Name: "token", Type: field.TypeString, Size: 100},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// TokensTable holds the schema information for the "tokens" table.
	TokensTable = &schema.Table{
		Name:       "tokens",
		Columns:    TokensColumns,
		PrimaryKey: []*schema.Column{TokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tokens_users_tokens",
				Columns:    []*schema.Column{TokensColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeBool, Default: true},
		{Name: "username", Type: field.TypeString, Size: 255},
		{Name: "password", Type: field.TypeString, Size: 255},
		{Name: "email", Type: field.TypeString, Size: 255},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// RbacRoleUsersColumns holds the columns for the "rbac_role_users" table.
	RbacRoleUsersColumns = []*schema.Column{
		{Name: "rbac_role_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// RbacRoleUsersTable holds the schema information for the "rbac_role_users" table.
	RbacRoleUsersTable = &schema.Table{
		Name:       "rbac_role_users",
		Columns:    RbacRoleUsersColumns,
		PrimaryKey: []*schema.Column{RbacRoleUsersColumns[0], RbacRoleUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "rbac_role_users_rbac_role_id",
				Columns:    []*schema.Column{RbacRoleUsersColumns[0]},
				RefColumns: []*schema.Column{RbacRolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "rbac_role_users_user_id",
				Columns:    []*schema.Column{RbacRoleUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DictionariesTable,
		HostsTable,
		HostBlacklistsTable,
		RbacObjectsTable,
		RbacPoliciesTable,
		RbacRolesTable,
		SubtasksTable,
		TasksTable,
		TokensTable,
		UsersTable,
		RbacRoleUsersTable,
	}
)

func init() {
	HostBlacklistsTable.ForeignKeys[0].RefTable = HostsTable
	SubtasksTable.ForeignKeys[0].RefTable = TasksTable
	TokensTable.ForeignKeys[0].RefTable = UsersTable
	RbacRoleUsersTable.ForeignKeys[0].RefTable = RbacRolesTable
	RbacRoleUsersTable.ForeignKeys[1].RefTable = UsersTable
}

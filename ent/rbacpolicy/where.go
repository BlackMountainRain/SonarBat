// Code generated by ent, DO NOT EDIT.

package rbacpolicy

import (
	"sonar-bat/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v uuid.UUID) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEQ(FieldUpdatedBy, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uuid.UUID) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEQ(FieldCreatedBy, v))
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEQ(FieldRole, v))
}

// Obj applies equality check predicate on the "obj" field. It's identical to ObjEQ.
func Obj(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEQ(FieldObj, v))
}

// Act applies equality check predicate on the "act" field. It's identical to ActEQ.
func Act(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEQ(FieldAct, v))
}

// URI applies equality check predicate on the "uri" field. It's identical to URIEQ.
func URI(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEQ(FieldURI, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v uuid.UUID) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v uuid.UUID) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...uuid.UUID) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...uuid.UUID) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v uuid.UUID) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v uuid.UUID) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v uuid.UUID) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v uuid.UUID) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldLTE(FieldUpdatedBy, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uuid.UUID) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uuid.UUID) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uuid.UUID) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uuid.UUID) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v uuid.UUID) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v uuid.UUID) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v uuid.UUID) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v uuid.UUID) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldLTE(FieldCreatedBy, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNotIn(FieldRole, vs...))
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldGT(FieldRole, v))
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldGTE(FieldRole, v))
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldLT(FieldRole, v))
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldLTE(FieldRole, v))
}

// RoleContains applies the Contains predicate on the "role" field.
func RoleContains(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldContains(FieldRole, v))
}

// RoleHasPrefix applies the HasPrefix predicate on the "role" field.
func RoleHasPrefix(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldHasPrefix(FieldRole, v))
}

// RoleHasSuffix applies the HasSuffix predicate on the "role" field.
func RoleHasSuffix(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldHasSuffix(FieldRole, v))
}

// RoleIsNil applies the IsNil predicate on the "role" field.
func RoleIsNil() predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldIsNull(FieldRole))
}

// RoleNotNil applies the NotNil predicate on the "role" field.
func RoleNotNil() predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNotNull(FieldRole))
}

// RoleEqualFold applies the EqualFold predicate on the "role" field.
func RoleEqualFold(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEqualFold(FieldRole, v))
}

// RoleContainsFold applies the ContainsFold predicate on the "role" field.
func RoleContainsFold(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldContainsFold(FieldRole, v))
}

// ObjEQ applies the EQ predicate on the "obj" field.
func ObjEQ(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEQ(FieldObj, v))
}

// ObjNEQ applies the NEQ predicate on the "obj" field.
func ObjNEQ(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNEQ(FieldObj, v))
}

// ObjIn applies the In predicate on the "obj" field.
func ObjIn(vs ...string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldIn(FieldObj, vs...))
}

// ObjNotIn applies the NotIn predicate on the "obj" field.
func ObjNotIn(vs ...string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNotIn(FieldObj, vs...))
}

// ObjGT applies the GT predicate on the "obj" field.
func ObjGT(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldGT(FieldObj, v))
}

// ObjGTE applies the GTE predicate on the "obj" field.
func ObjGTE(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldGTE(FieldObj, v))
}

// ObjLT applies the LT predicate on the "obj" field.
func ObjLT(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldLT(FieldObj, v))
}

// ObjLTE applies the LTE predicate on the "obj" field.
func ObjLTE(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldLTE(FieldObj, v))
}

// ObjContains applies the Contains predicate on the "obj" field.
func ObjContains(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldContains(FieldObj, v))
}

// ObjHasPrefix applies the HasPrefix predicate on the "obj" field.
func ObjHasPrefix(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldHasPrefix(FieldObj, v))
}

// ObjHasSuffix applies the HasSuffix predicate on the "obj" field.
func ObjHasSuffix(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldHasSuffix(FieldObj, v))
}

// ObjIsNil applies the IsNil predicate on the "obj" field.
func ObjIsNil() predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldIsNull(FieldObj))
}

// ObjNotNil applies the NotNil predicate on the "obj" field.
func ObjNotNil() predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNotNull(FieldObj))
}

// ObjEqualFold applies the EqualFold predicate on the "obj" field.
func ObjEqualFold(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEqualFold(FieldObj, v))
}

// ObjContainsFold applies the ContainsFold predicate on the "obj" field.
func ObjContainsFold(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldContainsFold(FieldObj, v))
}

// ActEQ applies the EQ predicate on the "act" field.
func ActEQ(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEQ(FieldAct, v))
}

// ActNEQ applies the NEQ predicate on the "act" field.
func ActNEQ(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNEQ(FieldAct, v))
}

// ActIn applies the In predicate on the "act" field.
func ActIn(vs ...string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldIn(FieldAct, vs...))
}

// ActNotIn applies the NotIn predicate on the "act" field.
func ActNotIn(vs ...string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNotIn(FieldAct, vs...))
}

// ActGT applies the GT predicate on the "act" field.
func ActGT(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldGT(FieldAct, v))
}

// ActGTE applies the GTE predicate on the "act" field.
func ActGTE(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldGTE(FieldAct, v))
}

// ActLT applies the LT predicate on the "act" field.
func ActLT(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldLT(FieldAct, v))
}

// ActLTE applies the LTE predicate on the "act" field.
func ActLTE(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldLTE(FieldAct, v))
}

// ActContains applies the Contains predicate on the "act" field.
func ActContains(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldContains(FieldAct, v))
}

// ActHasPrefix applies the HasPrefix predicate on the "act" field.
func ActHasPrefix(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldHasPrefix(FieldAct, v))
}

// ActHasSuffix applies the HasSuffix predicate on the "act" field.
func ActHasSuffix(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldHasSuffix(FieldAct, v))
}

// ActIsNil applies the IsNil predicate on the "act" field.
func ActIsNil() predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldIsNull(FieldAct))
}

// ActNotNil applies the NotNil predicate on the "act" field.
func ActNotNil() predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNotNull(FieldAct))
}

// ActEqualFold applies the EqualFold predicate on the "act" field.
func ActEqualFold(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEqualFold(FieldAct, v))
}

// ActContainsFold applies the ContainsFold predicate on the "act" field.
func ActContainsFold(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldContainsFold(FieldAct, v))
}

// URIEQ applies the EQ predicate on the "uri" field.
func URIEQ(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEQ(FieldURI, v))
}

// URINEQ applies the NEQ predicate on the "uri" field.
func URINEQ(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNEQ(FieldURI, v))
}

// URIIn applies the In predicate on the "uri" field.
func URIIn(vs ...string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldIn(FieldURI, vs...))
}

// URINotIn applies the NotIn predicate on the "uri" field.
func URINotIn(vs ...string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNotIn(FieldURI, vs...))
}

// URIGT applies the GT predicate on the "uri" field.
func URIGT(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldGT(FieldURI, v))
}

// URIGTE applies the GTE predicate on the "uri" field.
func URIGTE(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldGTE(FieldURI, v))
}

// URILT applies the LT predicate on the "uri" field.
func URILT(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldLT(FieldURI, v))
}

// URILTE applies the LTE predicate on the "uri" field.
func URILTE(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldLTE(FieldURI, v))
}

// URIContains applies the Contains predicate on the "uri" field.
func URIContains(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldContains(FieldURI, v))
}

// URIHasPrefix applies the HasPrefix predicate on the "uri" field.
func URIHasPrefix(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldHasPrefix(FieldURI, v))
}

// URIHasSuffix applies the HasSuffix predicate on the "uri" field.
func URIHasSuffix(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldHasSuffix(FieldURI, v))
}

// URIIsNil applies the IsNil predicate on the "uri" field.
func URIIsNil() predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldIsNull(FieldURI))
}

// URINotNil applies the NotNil predicate on the "uri" field.
func URINotNil() predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldNotNull(FieldURI))
}

// URIEqualFold applies the EqualFold predicate on the "uri" field.
func URIEqualFold(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldEqualFold(FieldURI, v))
}

// URIContainsFold applies the ContainsFold predicate on the "uri" field.
func URIContainsFold(v string) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.FieldContainsFold(FieldURI, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RbacPolicy) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RbacPolicy) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RbacPolicy) predicate.RbacPolicy {
	return predicate.RbacPolicy(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sonar-bat/ent/predicate"
	"sonar-bat/ent/rbacpolicy"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RbacPolicyUpdate is the builder for updating RbacPolicy entities.
type RbacPolicyUpdate struct {
	config
	hooks    []Hook
	mutation *RbacPolicyMutation
}

// Where appends a list predicates to the RbacPolicyUpdate builder.
func (rpu *RbacPolicyUpdate) Where(ps ...predicate.RbacPolicy) *RbacPolicyUpdate {
	rpu.mutation.Where(ps...)
	return rpu
}

// SetUpdatedAt sets the "updated_at" field.
func (rpu *RbacPolicyUpdate) SetUpdatedAt(t time.Time) *RbacPolicyUpdate {
	rpu.mutation.SetUpdatedAt(t)
	return rpu
}

// SetUpdatedBy sets the "updated_by" field.
func (rpu *RbacPolicyUpdate) SetUpdatedBy(u uuid.UUID) *RbacPolicyUpdate {
	rpu.mutation.SetUpdatedBy(u)
	return rpu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rpu *RbacPolicyUpdate) SetNillableUpdatedBy(u *uuid.UUID) *RbacPolicyUpdate {
	if u != nil {
		rpu.SetUpdatedBy(*u)
	}
	return rpu
}

// SetCreatedBy sets the "created_by" field.
func (rpu *RbacPolicyUpdate) SetCreatedBy(u uuid.UUID) *RbacPolicyUpdate {
	rpu.mutation.SetCreatedBy(u)
	return rpu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rpu *RbacPolicyUpdate) SetNillableCreatedBy(u *uuid.UUID) *RbacPolicyUpdate {
	if u != nil {
		rpu.SetCreatedBy(*u)
	}
	return rpu
}

// SetRole sets the "role" field.
func (rpu *RbacPolicyUpdate) SetRole(s string) *RbacPolicyUpdate {
	rpu.mutation.SetRole(s)
	return rpu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (rpu *RbacPolicyUpdate) SetNillableRole(s *string) *RbacPolicyUpdate {
	if s != nil {
		rpu.SetRole(*s)
	}
	return rpu
}

// ClearRole clears the value of the "role" field.
func (rpu *RbacPolicyUpdate) ClearRole() *RbacPolicyUpdate {
	rpu.mutation.ClearRole()
	return rpu
}

// SetObj sets the "obj" field.
func (rpu *RbacPolicyUpdate) SetObj(s string) *RbacPolicyUpdate {
	rpu.mutation.SetObj(s)
	return rpu
}

// SetNillableObj sets the "obj" field if the given value is not nil.
func (rpu *RbacPolicyUpdate) SetNillableObj(s *string) *RbacPolicyUpdate {
	if s != nil {
		rpu.SetObj(*s)
	}
	return rpu
}

// ClearObj clears the value of the "obj" field.
func (rpu *RbacPolicyUpdate) ClearObj() *RbacPolicyUpdate {
	rpu.mutation.ClearObj()
	return rpu
}

// SetAct sets the "act" field.
func (rpu *RbacPolicyUpdate) SetAct(s string) *RbacPolicyUpdate {
	rpu.mutation.SetAct(s)
	return rpu
}

// SetNillableAct sets the "act" field if the given value is not nil.
func (rpu *RbacPolicyUpdate) SetNillableAct(s *string) *RbacPolicyUpdate {
	if s != nil {
		rpu.SetAct(*s)
	}
	return rpu
}

// ClearAct clears the value of the "act" field.
func (rpu *RbacPolicyUpdate) ClearAct() *RbacPolicyUpdate {
	rpu.mutation.ClearAct()
	return rpu
}

// SetURI sets the "uri" field.
func (rpu *RbacPolicyUpdate) SetURI(s string) *RbacPolicyUpdate {
	rpu.mutation.SetURI(s)
	return rpu
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (rpu *RbacPolicyUpdate) SetNillableURI(s *string) *RbacPolicyUpdate {
	if s != nil {
		rpu.SetURI(*s)
	}
	return rpu
}

// ClearURI clears the value of the "uri" field.
func (rpu *RbacPolicyUpdate) ClearURI() *RbacPolicyUpdate {
	rpu.mutation.ClearURI()
	return rpu
}

// Mutation returns the RbacPolicyMutation object of the builder.
func (rpu *RbacPolicyUpdate) Mutation() *RbacPolicyMutation {
	return rpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpu *RbacPolicyUpdate) Save(ctx context.Context) (int, error) {
	rpu.defaults()
	return withHooks(ctx, rpu.sqlSave, rpu.mutation, rpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *RbacPolicyUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *RbacPolicyUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *RbacPolicyUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpu *RbacPolicyUpdate) defaults() {
	if _, ok := rpu.mutation.UpdatedAt(); !ok {
		v := rbacpolicy.UpdateDefaultUpdatedAt()
		rpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpu *RbacPolicyUpdate) check() error {
	if v, ok := rpu.mutation.Role(); ok {
		if err := rbacpolicy.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "RbacPolicy.role": %w`, err)}
		}
	}
	if v, ok := rpu.mutation.Obj(); ok {
		if err := rbacpolicy.ObjValidator(v); err != nil {
			return &ValidationError{Name: "obj", err: fmt.Errorf(`ent: validator failed for field "RbacPolicy.obj": %w`, err)}
		}
	}
	if v, ok := rpu.mutation.Act(); ok {
		if err := rbacpolicy.ActValidator(v); err != nil {
			return &ValidationError{Name: "act", err: fmt.Errorf(`ent: validator failed for field "RbacPolicy.act": %w`, err)}
		}
	}
	if v, ok := rpu.mutation.URI(); ok {
		if err := rbacpolicy.URIValidator(v); err != nil {
			return &ValidationError{Name: "uri", err: fmt.Errorf(`ent: validator failed for field "RbacPolicy.uri": %w`, err)}
		}
	}
	return nil
}

func (rpu *RbacPolicyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rbacpolicy.Table, rbacpolicy.Columns, sqlgraph.NewFieldSpec(rbacpolicy.FieldID, field.TypeUUID))
	if ps := rpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpu.mutation.UpdatedAt(); ok {
		_spec.SetField(rbacpolicy.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rpu.mutation.UpdatedBy(); ok {
		_spec.SetField(rbacpolicy.FieldUpdatedBy, field.TypeUUID, value)
	}
	if value, ok := rpu.mutation.CreatedBy(); ok {
		_spec.SetField(rbacpolicy.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := rpu.mutation.Role(); ok {
		_spec.SetField(rbacpolicy.FieldRole, field.TypeString, value)
	}
	if rpu.mutation.RoleCleared() {
		_spec.ClearField(rbacpolicy.FieldRole, field.TypeString)
	}
	if value, ok := rpu.mutation.Obj(); ok {
		_spec.SetField(rbacpolicy.FieldObj, field.TypeString, value)
	}
	if rpu.mutation.ObjCleared() {
		_spec.ClearField(rbacpolicy.FieldObj, field.TypeString)
	}
	if value, ok := rpu.mutation.Act(); ok {
		_spec.SetField(rbacpolicy.FieldAct, field.TypeString, value)
	}
	if rpu.mutation.ActCleared() {
		_spec.ClearField(rbacpolicy.FieldAct, field.TypeString)
	}
	if value, ok := rpu.mutation.URI(); ok {
		_spec.SetField(rbacpolicy.FieldURI, field.TypeString, value)
	}
	if rpu.mutation.URICleared() {
		_spec.ClearField(rbacpolicy.FieldURI, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rbacpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpu.mutation.done = true
	return n, nil
}

// RbacPolicyUpdateOne is the builder for updating a single RbacPolicy entity.
type RbacPolicyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RbacPolicyMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (rpuo *RbacPolicyUpdateOne) SetUpdatedAt(t time.Time) *RbacPolicyUpdateOne {
	rpuo.mutation.SetUpdatedAt(t)
	return rpuo
}

// SetUpdatedBy sets the "updated_by" field.
func (rpuo *RbacPolicyUpdateOne) SetUpdatedBy(u uuid.UUID) *RbacPolicyUpdateOne {
	rpuo.mutation.SetUpdatedBy(u)
	return rpuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rpuo *RbacPolicyUpdateOne) SetNillableUpdatedBy(u *uuid.UUID) *RbacPolicyUpdateOne {
	if u != nil {
		rpuo.SetUpdatedBy(*u)
	}
	return rpuo
}

// SetCreatedBy sets the "created_by" field.
func (rpuo *RbacPolicyUpdateOne) SetCreatedBy(u uuid.UUID) *RbacPolicyUpdateOne {
	rpuo.mutation.SetCreatedBy(u)
	return rpuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rpuo *RbacPolicyUpdateOne) SetNillableCreatedBy(u *uuid.UUID) *RbacPolicyUpdateOne {
	if u != nil {
		rpuo.SetCreatedBy(*u)
	}
	return rpuo
}

// SetRole sets the "role" field.
func (rpuo *RbacPolicyUpdateOne) SetRole(s string) *RbacPolicyUpdateOne {
	rpuo.mutation.SetRole(s)
	return rpuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (rpuo *RbacPolicyUpdateOne) SetNillableRole(s *string) *RbacPolicyUpdateOne {
	if s != nil {
		rpuo.SetRole(*s)
	}
	return rpuo
}

// ClearRole clears the value of the "role" field.
func (rpuo *RbacPolicyUpdateOne) ClearRole() *RbacPolicyUpdateOne {
	rpuo.mutation.ClearRole()
	return rpuo
}

// SetObj sets the "obj" field.
func (rpuo *RbacPolicyUpdateOne) SetObj(s string) *RbacPolicyUpdateOne {
	rpuo.mutation.SetObj(s)
	return rpuo
}

// SetNillableObj sets the "obj" field if the given value is not nil.
func (rpuo *RbacPolicyUpdateOne) SetNillableObj(s *string) *RbacPolicyUpdateOne {
	if s != nil {
		rpuo.SetObj(*s)
	}
	return rpuo
}

// ClearObj clears the value of the "obj" field.
func (rpuo *RbacPolicyUpdateOne) ClearObj() *RbacPolicyUpdateOne {
	rpuo.mutation.ClearObj()
	return rpuo
}

// SetAct sets the "act" field.
func (rpuo *RbacPolicyUpdateOne) SetAct(s string) *RbacPolicyUpdateOne {
	rpuo.mutation.SetAct(s)
	return rpuo
}

// SetNillableAct sets the "act" field if the given value is not nil.
func (rpuo *RbacPolicyUpdateOne) SetNillableAct(s *string) *RbacPolicyUpdateOne {
	if s != nil {
		rpuo.SetAct(*s)
	}
	return rpuo
}

// ClearAct clears the value of the "act" field.
func (rpuo *RbacPolicyUpdateOne) ClearAct() *RbacPolicyUpdateOne {
	rpuo.mutation.ClearAct()
	return rpuo
}

// SetURI sets the "uri" field.
func (rpuo *RbacPolicyUpdateOne) SetURI(s string) *RbacPolicyUpdateOne {
	rpuo.mutation.SetURI(s)
	return rpuo
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (rpuo *RbacPolicyUpdateOne) SetNillableURI(s *string) *RbacPolicyUpdateOne {
	if s != nil {
		rpuo.SetURI(*s)
	}
	return rpuo
}

// ClearURI clears the value of the "uri" field.
func (rpuo *RbacPolicyUpdateOne) ClearURI() *RbacPolicyUpdateOne {
	rpuo.mutation.ClearURI()
	return rpuo
}

// Mutation returns the RbacPolicyMutation object of the builder.
func (rpuo *RbacPolicyUpdateOne) Mutation() *RbacPolicyMutation {
	return rpuo.mutation
}

// Where appends a list predicates to the RbacPolicyUpdate builder.
func (rpuo *RbacPolicyUpdateOne) Where(ps ...predicate.RbacPolicy) *RbacPolicyUpdateOne {
	rpuo.mutation.Where(ps...)
	return rpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpuo *RbacPolicyUpdateOne) Select(field string, fields ...string) *RbacPolicyUpdateOne {
	rpuo.fields = append([]string{field}, fields...)
	return rpuo
}

// Save executes the query and returns the updated RbacPolicy entity.
func (rpuo *RbacPolicyUpdateOne) Save(ctx context.Context) (*RbacPolicy, error) {
	rpuo.defaults()
	return withHooks(ctx, rpuo.sqlSave, rpuo.mutation, rpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *RbacPolicyUpdateOne) SaveX(ctx context.Context) *RbacPolicy {
	node, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpuo *RbacPolicyUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *RbacPolicyUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpuo *RbacPolicyUpdateOne) defaults() {
	if _, ok := rpuo.mutation.UpdatedAt(); !ok {
		v := rbacpolicy.UpdateDefaultUpdatedAt()
		rpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpuo *RbacPolicyUpdateOne) check() error {
	if v, ok := rpuo.mutation.Role(); ok {
		if err := rbacpolicy.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "RbacPolicy.role": %w`, err)}
		}
	}
	if v, ok := rpuo.mutation.Obj(); ok {
		if err := rbacpolicy.ObjValidator(v); err != nil {
			return &ValidationError{Name: "obj", err: fmt.Errorf(`ent: validator failed for field "RbacPolicy.obj": %w`, err)}
		}
	}
	if v, ok := rpuo.mutation.Act(); ok {
		if err := rbacpolicy.ActValidator(v); err != nil {
			return &ValidationError{Name: "act", err: fmt.Errorf(`ent: validator failed for field "RbacPolicy.act": %w`, err)}
		}
	}
	if v, ok := rpuo.mutation.URI(); ok {
		if err := rbacpolicy.URIValidator(v); err != nil {
			return &ValidationError{Name: "uri", err: fmt.Errorf(`ent: validator failed for field "RbacPolicy.uri": %w`, err)}
		}
	}
	return nil
}

func (rpuo *RbacPolicyUpdateOne) sqlSave(ctx context.Context) (_node *RbacPolicy, err error) {
	if err := rpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rbacpolicy.Table, rbacpolicy.Columns, sqlgraph.NewFieldSpec(rbacpolicy.FieldID, field.TypeUUID))
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RbacPolicy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rbacpolicy.FieldID)
		for _, f := range fields {
			if !rbacpolicy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rbacpolicy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(rbacpolicy.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rpuo.mutation.UpdatedBy(); ok {
		_spec.SetField(rbacpolicy.FieldUpdatedBy, field.TypeUUID, value)
	}
	if value, ok := rpuo.mutation.CreatedBy(); ok {
		_spec.SetField(rbacpolicy.FieldCreatedBy, field.TypeUUID, value)
	}
	if value, ok := rpuo.mutation.Role(); ok {
		_spec.SetField(rbacpolicy.FieldRole, field.TypeString, value)
	}
	if rpuo.mutation.RoleCleared() {
		_spec.ClearField(rbacpolicy.FieldRole, field.TypeString)
	}
	if value, ok := rpuo.mutation.Obj(); ok {
		_spec.SetField(rbacpolicy.FieldObj, field.TypeString, value)
	}
	if rpuo.mutation.ObjCleared() {
		_spec.ClearField(rbacpolicy.FieldObj, field.TypeString)
	}
	if value, ok := rpuo.mutation.Act(); ok {
		_spec.SetField(rbacpolicy.FieldAct, field.TypeString, value)
	}
	if rpuo.mutation.ActCleared() {
		_spec.ClearField(rbacpolicy.FieldAct, field.TypeString)
	}
	if value, ok := rpuo.mutation.URI(); ok {
		_spec.SetField(rbacpolicy.FieldURI, field.TypeString, value)
	}
	if rpuo.mutation.URICleared() {
		_spec.ClearField(rbacpolicy.FieldURI, field.TypeString)
	}
	_node = &RbacPolicy{config: rpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rbacpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpuo.mutation.done = true
	return _node, nil
}

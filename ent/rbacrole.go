// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sonar-bat/ent/rbacrole"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// RbacRole is the model entity for the RbacRole schema.
type RbacRole struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy uuid.UUID `json:"updated_by,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RbacRoleQuery when eager-loading is set.
	Edges        RbacRoleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RbacRoleEdges holds the relations/edges for other nodes in the graph.
type RbacRoleEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e RbacRoleEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RbacRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rbacrole.FieldStatus:
			values[i] = new(sql.NullBool)
		case rbacrole.FieldName, rbacrole.FieldDescription:
			values[i] = new(sql.NullString)
		case rbacrole.FieldCreatedAt, rbacrole.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case rbacrole.FieldID, rbacrole.FieldUpdatedBy, rbacrole.FieldCreatedBy:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RbacRole fields.
func (rr *RbacRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rbacrole.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rr.ID = *value
			}
		case rbacrole.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rr.CreatedAt = value.Time
			}
		case rbacrole.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rr.UpdatedAt = value.Time
			}
		case rbacrole.FieldUpdatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value != nil {
				rr.UpdatedBy = *value
			}
		case rbacrole.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				rr.CreatedBy = *value
			}
		case rbacrole.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				rr.Status = value.Bool
			}
		case rbacrole.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rr.Name = value.String
			}
		case rbacrole.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				rr.Description = value.String
			}
		default:
			rr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RbacRole.
// This includes values selected through modifiers, order, etc.
func (rr *RbacRole) Value(name string) (ent.Value, error) {
	return rr.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the RbacRole entity.
func (rr *RbacRole) QueryUsers() *UserQuery {
	return NewRbacRoleClient(rr.config).QueryUsers(rr)
}

// Update returns a builder for updating this RbacRole.
// Note that you need to call RbacRole.Unwrap() before calling this method if this RbacRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (rr *RbacRole) Update() *RbacRoleUpdateOne {
	return NewRbacRoleClient(rr.config).UpdateOne(rr)
}

// Unwrap unwraps the RbacRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rr *RbacRole) Unwrap() *RbacRole {
	_tx, ok := rr.config.driver.(*txDriver)
	if !ok {
		panic("ent: RbacRole is not a transactional entity")
	}
	rr.config.driver = _tx.drv
	return rr
}

// String implements the fmt.Stringer.
func (rr *RbacRole) String() string {
	var builder strings.Builder
	builder.WriteString("RbacRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(rr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", rr.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", rr.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", rr.Status))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(rr.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(rr.Description)
	builder.WriteByte(')')
	return builder.String()
}

// RbacRoles is a parsable slice of RbacRole.
type RbacRoles []*RbacRole

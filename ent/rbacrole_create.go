// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sonar-bat/ent/rbacrole"
	"sonar-bat/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RbacRoleCreate is the builder for creating a RbacRole entity.
type RbacRoleCreate struct {
	config
	mutation *RbacRoleMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rrc *RbacRoleCreate) SetCreatedAt(t time.Time) *RbacRoleCreate {
	rrc.mutation.SetCreatedAt(t)
	return rrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rrc *RbacRoleCreate) SetNillableCreatedAt(t *time.Time) *RbacRoleCreate {
	if t != nil {
		rrc.SetCreatedAt(*t)
	}
	return rrc
}

// SetUpdatedAt sets the "updated_at" field.
func (rrc *RbacRoleCreate) SetUpdatedAt(t time.Time) *RbacRoleCreate {
	rrc.mutation.SetUpdatedAt(t)
	return rrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rrc *RbacRoleCreate) SetNillableUpdatedAt(t *time.Time) *RbacRoleCreate {
	if t != nil {
		rrc.SetUpdatedAt(*t)
	}
	return rrc
}

// SetUpdatedBy sets the "updated_by" field.
func (rrc *RbacRoleCreate) SetUpdatedBy(u uuid.UUID) *RbacRoleCreate {
	rrc.mutation.SetUpdatedBy(u)
	return rrc
}

// SetCreatedBy sets the "created_by" field.
func (rrc *RbacRoleCreate) SetCreatedBy(u uuid.UUID) *RbacRoleCreate {
	rrc.mutation.SetCreatedBy(u)
	return rrc
}

// SetStatus sets the "status" field.
func (rrc *RbacRoleCreate) SetStatus(b bool) *RbacRoleCreate {
	rrc.mutation.SetStatus(b)
	return rrc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rrc *RbacRoleCreate) SetNillableStatus(b *bool) *RbacRoleCreate {
	if b != nil {
		rrc.SetStatus(*b)
	}
	return rrc
}

// SetName sets the "name" field.
func (rrc *RbacRoleCreate) SetName(s string) *RbacRoleCreate {
	rrc.mutation.SetName(s)
	return rrc
}

// SetDescription sets the "description" field.
func (rrc *RbacRoleCreate) SetDescription(s string) *RbacRoleCreate {
	rrc.mutation.SetDescription(s)
	return rrc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rrc *RbacRoleCreate) SetNillableDescription(s *string) *RbacRoleCreate {
	if s != nil {
		rrc.SetDescription(*s)
	}
	return rrc
}

// SetID sets the "id" field.
func (rrc *RbacRoleCreate) SetID(u uuid.UUID) *RbacRoleCreate {
	rrc.mutation.SetID(u)
	return rrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rrc *RbacRoleCreate) SetNillableID(u *uuid.UUID) *RbacRoleCreate {
	if u != nil {
		rrc.SetID(*u)
	}
	return rrc
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (rrc *RbacRoleCreate) AddUserIDs(ids ...uuid.UUID) *RbacRoleCreate {
	rrc.mutation.AddUserIDs(ids...)
	return rrc
}

// AddUsers adds the "users" edges to the User entity.
func (rrc *RbacRoleCreate) AddUsers(u ...*User) *RbacRoleCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rrc.AddUserIDs(ids...)
}

// Mutation returns the RbacRoleMutation object of the builder.
func (rrc *RbacRoleCreate) Mutation() *RbacRoleMutation {
	return rrc.mutation
}

// Save creates the RbacRole in the database.
func (rrc *RbacRoleCreate) Save(ctx context.Context) (*RbacRole, error) {
	rrc.defaults()
	return withHooks(ctx, rrc.sqlSave, rrc.mutation, rrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rrc *RbacRoleCreate) SaveX(ctx context.Context) *RbacRole {
	v, err := rrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrc *RbacRoleCreate) Exec(ctx context.Context) error {
	_, err := rrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrc *RbacRoleCreate) ExecX(ctx context.Context) {
	if err := rrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rrc *RbacRoleCreate) defaults() {
	if _, ok := rrc.mutation.CreatedAt(); !ok {
		v := rbacrole.DefaultCreatedAt()
		rrc.mutation.SetCreatedAt(v)
	}
	if _, ok := rrc.mutation.UpdatedAt(); !ok {
		v := rbacrole.DefaultUpdatedAt()
		rrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rrc.mutation.Status(); !ok {
		v := rbacrole.DefaultStatus
		rrc.mutation.SetStatus(v)
	}
	if _, ok := rrc.mutation.Description(); !ok {
		v := rbacrole.DefaultDescription
		rrc.mutation.SetDescription(v)
	}
	if _, ok := rrc.mutation.ID(); !ok {
		v := rbacrole.DefaultID()
		rrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rrc *RbacRoleCreate) check() error {
	if _, ok := rrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RbacRole.created_at"`)}
	}
	if _, ok := rrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RbacRole.updated_at"`)}
	}
	if _, ok := rrc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "RbacRole.updated_by"`)}
	}
	if _, ok := rrc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "RbacRole.created_by"`)}
	}
	if _, ok := rrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "RbacRole.status"`)}
	}
	if _, ok := rrc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "RbacRole.name"`)}
	}
	if v, ok := rrc.mutation.Name(); ok {
		if err := rbacrole.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RbacRole.name": %w`, err)}
		}
	}
	if _, ok := rrc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "RbacRole.description"`)}
	}
	if v, ok := rrc.mutation.Description(); ok {
		if err := rbacrole.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "RbacRole.description": %w`, err)}
		}
	}
	return nil
}

func (rrc *RbacRoleCreate) sqlSave(ctx context.Context) (*RbacRole, error) {
	if err := rrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rrc.mutation.id = &_node.ID
	rrc.mutation.done = true
	return _node, nil
}

func (rrc *RbacRoleCreate) createSpec() (*RbacRole, *sqlgraph.CreateSpec) {
	var (
		_node = &RbacRole{config: rrc.config}
		_spec = sqlgraph.NewCreateSpec(rbacrole.Table, sqlgraph.NewFieldSpec(rbacrole.FieldID, field.TypeUUID))
	)
	if id, ok := rrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rrc.mutation.CreatedAt(); ok {
		_spec.SetField(rbacrole.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rrc.mutation.UpdatedAt(); ok {
		_spec.SetField(rbacrole.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rrc.mutation.UpdatedBy(); ok {
		_spec.SetField(rbacrole.FieldUpdatedBy, field.TypeUUID, value)
		_node.UpdatedBy = value
	}
	if value, ok := rrc.mutation.CreatedBy(); ok {
		_spec.SetField(rbacrole.FieldCreatedBy, field.TypeUUID, value)
		_node.CreatedBy = value
	}
	if value, ok := rrc.mutation.Status(); ok {
		_spec.SetField(rbacrole.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	if value, ok := rrc.mutation.Name(); ok {
		_spec.SetField(rbacrole.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rrc.mutation.Description(); ok {
		_spec.SetField(rbacrole.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := rrc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   rbacrole.UsersTable,
			Columns: rbacrole.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RbacRoleCreateBulk is the builder for creating many RbacRole entities in bulk.
type RbacRoleCreateBulk struct {
	config
	err      error
	builders []*RbacRoleCreate
}

// Save creates the RbacRole entities in the database.
func (rrcb *RbacRoleCreateBulk) Save(ctx context.Context) ([]*RbacRole, error) {
	if rrcb.err != nil {
		return nil, rrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rrcb.builders))
	nodes := make([]*RbacRole, len(rrcb.builders))
	mutators := make([]Mutator, len(rrcb.builders))
	for i := range rrcb.builders {
		func(i int, root context.Context) {
			builder := rrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RbacRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rrcb *RbacRoleCreateBulk) SaveX(ctx context.Context) []*RbacRole {
	v, err := rrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rrcb *RbacRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := rrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rrcb *RbacRoleCreateBulk) ExecX(ctx context.Context) {
	if err := rrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

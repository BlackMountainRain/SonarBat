// Code generated by ent, DO NOT EDIT.

package ent

import (
	"sonar-bat/ent/dictionary"
	"sonar-bat/ent/host"
	"sonar-bat/ent/hostblacklist"
	"sonar-bat/ent/rbacobject"
	"sonar-bat/ent/rbacpolicy"
	"sonar-bat/ent/rbacrole"
	"sonar-bat/ent/schema"
	"sonar-bat/ent/subtask"
	"sonar-bat/ent/task"
	"sonar-bat/ent/token"
	"sonar-bat/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	dictionaryMixin := schema.Dictionary{}.Mixin()
	dictionaryMixinFields0 := dictionaryMixin[0].Fields()
	_ = dictionaryMixinFields0
	dictionaryFields := schema.Dictionary{}.Fields()
	_ = dictionaryFields
	// dictionaryDescCreatedAt is the schema descriptor for created_at field.
	dictionaryDescCreatedAt := dictionaryMixinFields0[0].Descriptor()
	// dictionary.DefaultCreatedAt holds the default value on creation for the created_at field.
	dictionary.DefaultCreatedAt = dictionaryDescCreatedAt.Default.(func() time.Time)
	// dictionaryDescUpdatedAt is the schema descriptor for updated_at field.
	dictionaryDescUpdatedAt := dictionaryMixinFields0[1].Descriptor()
	// dictionary.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	dictionary.DefaultUpdatedAt = dictionaryDescUpdatedAt.Default.(func() time.Time)
	// dictionary.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	dictionary.UpdateDefaultUpdatedAt = dictionaryDescUpdatedAt.UpdateDefault.(func() time.Time)
	// dictionaryDescCategory is the schema descriptor for category field.
	dictionaryDescCategory := dictionaryFields[1].Descriptor()
	// dictionary.CategoryValidator is a validator for the "category" field. It is called by the builders before save.
	dictionary.CategoryValidator = dictionaryDescCategory.Validators[0].(func(string) error)
	// dictionaryDescKey is the schema descriptor for key field.
	dictionaryDescKey := dictionaryFields[2].Descriptor()
	// dictionary.KeyValidator is a validator for the "key" field. It is called by the builders before save.
	dictionary.KeyValidator = dictionaryDescKey.Validators[0].(func(string) error)
	// dictionaryDescValue is the schema descriptor for value field.
	dictionaryDescValue := dictionaryFields[3].Descriptor()
	// dictionary.ValueValidator is a validator for the "value" field. It is called by the builders before save.
	dictionary.ValueValidator = dictionaryDescValue.Validators[0].(func(string) error)
	// dictionaryDescID is the schema descriptor for id field.
	dictionaryDescID := dictionaryFields[0].Descriptor()
	// dictionary.DefaultID holds the default value on creation for the id field.
	dictionary.DefaultID = dictionaryDescID.Default.(func() uuid.UUID)
	hostMixin := schema.Host{}.Mixin()
	hostMixinFields0 := hostMixin[0].Fields()
	_ = hostMixinFields0
	hostFields := schema.Host{}.Fields()
	_ = hostFields
	// hostDescCreatedAt is the schema descriptor for created_at field.
	hostDescCreatedAt := hostMixinFields0[0].Descriptor()
	// host.DefaultCreatedAt holds the default value on creation for the created_at field.
	host.DefaultCreatedAt = hostDescCreatedAt.Default.(func() time.Time)
	// hostDescUpdatedAt is the schema descriptor for updated_at field.
	hostDescUpdatedAt := hostMixinFields0[1].Descriptor()
	// host.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	host.DefaultUpdatedAt = hostDescUpdatedAt.Default.(func() time.Time)
	// host.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	host.UpdateDefaultUpdatedAt = hostDescUpdatedAt.UpdateDefault.(func() time.Time)
	// hostDescStatus is the schema descriptor for status field.
	hostDescStatus := hostFields[1].Descriptor()
	// host.DefaultStatus holds the default value on creation for the status field.
	host.DefaultStatus = hostDescStatus.Default.(bool)
	// hostDescName is the schema descriptor for name field.
	hostDescName := hostFields[2].Descriptor()
	// host.NameValidator is a validator for the "name" field. It is called by the builders before save.
	host.NameValidator = func() func(string) error {
		validators := hostDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// hostDescIsAgentInstalled is the schema descriptor for is_agent_installed field.
	hostDescIsAgentInstalled := hostFields[4].Descriptor()
	// host.DefaultIsAgentInstalled holds the default value on creation for the is_agent_installed field.
	host.DefaultIsAgentInstalled = hostDescIsAgentInstalled.Default.(bool)
	// hostDescAgentVersion is the schema descriptor for agent_version field.
	hostDescAgentVersion := hostFields[5].Descriptor()
	// host.AgentVersionValidator is a validator for the "agent_version" field. It is called by the builders before save.
	host.AgentVersionValidator = hostDescAgentVersion.Validators[0].(func(string) error)
	// hostDescID is the schema descriptor for id field.
	hostDescID := hostFields[0].Descriptor()
	// host.DefaultID holds the default value on creation for the id field.
	host.DefaultID = hostDescID.Default.(func() uuid.UUID)
	hostblacklistMixin := schema.HostBlacklist{}.Mixin()
	hostblacklistMixinFields0 := hostblacklistMixin[0].Fields()
	_ = hostblacklistMixinFields0
	hostblacklistFields := schema.HostBlacklist{}.Fields()
	_ = hostblacklistFields
	// hostblacklistDescCreatedAt is the schema descriptor for created_at field.
	hostblacklistDescCreatedAt := hostblacklistMixinFields0[0].Descriptor()
	// hostblacklist.DefaultCreatedAt holds the default value on creation for the created_at field.
	hostblacklist.DefaultCreatedAt = hostblacklistDescCreatedAt.Default.(func() time.Time)
	// hostblacklistDescUpdatedAt is the schema descriptor for updated_at field.
	hostblacklistDescUpdatedAt := hostblacklistMixinFields0[1].Descriptor()
	// hostblacklist.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	hostblacklist.DefaultUpdatedAt = hostblacklistDescUpdatedAt.Default.(func() time.Time)
	// hostblacklist.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	hostblacklist.UpdateDefaultUpdatedAt = hostblacklistDescUpdatedAt.UpdateDefault.(func() time.Time)
	// hostblacklistDescReason is the schema descriptor for reason field.
	hostblacklistDescReason := hostblacklistFields[2].Descriptor()
	// hostblacklist.ReasonValidator is a validator for the "reason" field. It is called by the builders before save.
	hostblacklist.ReasonValidator = func() func(string) error {
		validators := hostblacklistDescReason.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(reason string) error {
			for _, fn := range fns {
				if err := fn(reason); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// hostblacklistDescID is the schema descriptor for id field.
	hostblacklistDescID := hostblacklistFields[0].Descriptor()
	// hostblacklist.DefaultID holds the default value on creation for the id field.
	hostblacklist.DefaultID = hostblacklistDescID.Default.(func() uuid.UUID)
	rbacobjectMixin := schema.RbacObject{}.Mixin()
	rbacobjectMixinFields0 := rbacobjectMixin[0].Fields()
	_ = rbacobjectMixinFields0
	rbacobjectFields := schema.RbacObject{}.Fields()
	_ = rbacobjectFields
	// rbacobjectDescCreatedAt is the schema descriptor for created_at field.
	rbacobjectDescCreatedAt := rbacobjectMixinFields0[0].Descriptor()
	// rbacobject.DefaultCreatedAt holds the default value on creation for the created_at field.
	rbacobject.DefaultCreatedAt = rbacobjectDescCreatedAt.Default.(func() time.Time)
	// rbacobjectDescUpdatedAt is the schema descriptor for updated_at field.
	rbacobjectDescUpdatedAt := rbacobjectMixinFields0[1].Descriptor()
	// rbacobject.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	rbacobject.DefaultUpdatedAt = rbacobjectDescUpdatedAt.Default.(func() time.Time)
	// rbacobject.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	rbacobject.UpdateDefaultUpdatedAt = rbacobjectDescUpdatedAt.UpdateDefault.(func() time.Time)
	// rbacobjectDescStatus is the schema descriptor for status field.
	rbacobjectDescStatus := rbacobjectFields[1].Descriptor()
	// rbacobject.DefaultStatus holds the default value on creation for the status field.
	rbacobject.DefaultStatus = rbacobjectDescStatus.Default.(bool)
	// rbacobjectDescValue is the schema descriptor for value field.
	rbacobjectDescValue := rbacobjectFields[2].Descriptor()
	// rbacobject.ValueValidator is a validator for the "value" field. It is called by the builders before save.
	rbacobject.ValueValidator = func() func(string) error {
		validators := rbacobjectDescValue.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(value string) error {
			for _, fn := range fns {
				if err := fn(value); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// rbacobjectDescID is the schema descriptor for id field.
	rbacobjectDescID := rbacobjectFields[0].Descriptor()
	// rbacobject.DefaultID holds the default value on creation for the id field.
	rbacobject.DefaultID = rbacobjectDescID.Default.(func() uuid.UUID)
	rbacpolicyMixin := schema.RbacPolicy{}.Mixin()
	rbacpolicyMixinFields0 := rbacpolicyMixin[0].Fields()
	_ = rbacpolicyMixinFields0
	rbacpolicyFields := schema.RbacPolicy{}.Fields()
	_ = rbacpolicyFields
	// rbacpolicyDescCreatedAt is the schema descriptor for created_at field.
	rbacpolicyDescCreatedAt := rbacpolicyMixinFields0[0].Descriptor()
	// rbacpolicy.DefaultCreatedAt holds the default value on creation for the created_at field.
	rbacpolicy.DefaultCreatedAt = rbacpolicyDescCreatedAt.Default.(func() time.Time)
	// rbacpolicyDescUpdatedAt is the schema descriptor for updated_at field.
	rbacpolicyDescUpdatedAt := rbacpolicyMixinFields0[1].Descriptor()
	// rbacpolicy.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	rbacpolicy.DefaultUpdatedAt = rbacpolicyDescUpdatedAt.Default.(func() time.Time)
	// rbacpolicy.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	rbacpolicy.UpdateDefaultUpdatedAt = rbacpolicyDescUpdatedAt.UpdateDefault.(func() time.Time)
	// rbacpolicyDescRole is the schema descriptor for role field.
	rbacpolicyDescRole := rbacpolicyFields[1].Descriptor()
	// rbacpolicy.RoleValidator is a validator for the "role" field. It is called by the builders before save.
	rbacpolicy.RoleValidator = rbacpolicyDescRole.Validators[0].(func(string) error)
	// rbacpolicyDescObj is the schema descriptor for obj field.
	rbacpolicyDescObj := rbacpolicyFields[2].Descriptor()
	// rbacpolicy.ObjValidator is a validator for the "obj" field. It is called by the builders before save.
	rbacpolicy.ObjValidator = rbacpolicyDescObj.Validators[0].(func(string) error)
	// rbacpolicyDescAct is the schema descriptor for act field.
	rbacpolicyDescAct := rbacpolicyFields[3].Descriptor()
	// rbacpolicy.ActValidator is a validator for the "act" field. It is called by the builders before save.
	rbacpolicy.ActValidator = rbacpolicyDescAct.Validators[0].(func(string) error)
	// rbacpolicyDescURI is the schema descriptor for uri field.
	rbacpolicyDescURI := rbacpolicyFields[4].Descriptor()
	// rbacpolicy.URIValidator is a validator for the "uri" field. It is called by the builders before save.
	rbacpolicy.URIValidator = rbacpolicyDescURI.Validators[0].(func(string) error)
	// rbacpolicyDescID is the schema descriptor for id field.
	rbacpolicyDescID := rbacpolicyFields[0].Descriptor()
	// rbacpolicy.DefaultID holds the default value on creation for the id field.
	rbacpolicy.DefaultID = rbacpolicyDescID.Default.(func() uuid.UUID)
	rbacroleMixin := schema.RbacRole{}.Mixin()
	rbacroleMixinFields0 := rbacroleMixin[0].Fields()
	_ = rbacroleMixinFields0
	rbacroleFields := schema.RbacRole{}.Fields()
	_ = rbacroleFields
	// rbacroleDescCreatedAt is the schema descriptor for created_at field.
	rbacroleDescCreatedAt := rbacroleMixinFields0[0].Descriptor()
	// rbacrole.DefaultCreatedAt holds the default value on creation for the created_at field.
	rbacrole.DefaultCreatedAt = rbacroleDescCreatedAt.Default.(func() time.Time)
	// rbacroleDescUpdatedAt is the schema descriptor for updated_at field.
	rbacroleDescUpdatedAt := rbacroleMixinFields0[1].Descriptor()
	// rbacrole.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	rbacrole.DefaultUpdatedAt = rbacroleDescUpdatedAt.Default.(func() time.Time)
	// rbacrole.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	rbacrole.UpdateDefaultUpdatedAt = rbacroleDescUpdatedAt.UpdateDefault.(func() time.Time)
	// rbacroleDescStatus is the schema descriptor for status field.
	rbacroleDescStatus := rbacroleFields[1].Descriptor()
	// rbacrole.DefaultStatus holds the default value on creation for the status field.
	rbacrole.DefaultStatus = rbacroleDescStatus.Default.(bool)
	// rbacroleDescName is the schema descriptor for name field.
	rbacroleDescName := rbacroleFields[2].Descriptor()
	// rbacrole.NameValidator is a validator for the "name" field. It is called by the builders before save.
	rbacrole.NameValidator = func() func(string) error {
		validators := rbacroleDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// rbacroleDescDescription is the schema descriptor for description field.
	rbacroleDescDescription := rbacroleFields[3].Descriptor()
	// rbacrole.DefaultDescription holds the default value on creation for the description field.
	rbacrole.DefaultDescription = rbacroleDescDescription.Default.(string)
	// rbacrole.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	rbacrole.DescriptionValidator = rbacroleDescDescription.Validators[0].(func(string) error)
	// rbacroleDescID is the schema descriptor for id field.
	rbacroleDescID := rbacroleFields[0].Descriptor()
	// rbacrole.DefaultID holds the default value on creation for the id field.
	rbacrole.DefaultID = rbacroleDescID.Default.(func() uuid.UUID)
	subtaskMixin := schema.Subtask{}.Mixin()
	subtaskMixinFields0 := subtaskMixin[0].Fields()
	_ = subtaskMixinFields0
	subtaskFields := schema.Subtask{}.Fields()
	_ = subtaskFields
	// subtaskDescCreatedAt is the schema descriptor for created_at field.
	subtaskDescCreatedAt := subtaskMixinFields0[0].Descriptor()
	// subtask.DefaultCreatedAt holds the default value on creation for the created_at field.
	subtask.DefaultCreatedAt = subtaskDescCreatedAt.Default.(func() time.Time)
	// subtaskDescUpdatedAt is the schema descriptor for updated_at field.
	subtaskDescUpdatedAt := subtaskMixinFields0[1].Descriptor()
	// subtask.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	subtask.DefaultUpdatedAt = subtaskDescUpdatedAt.Default.(func() time.Time)
	// subtask.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	subtask.UpdateDefaultUpdatedAt = subtaskDescUpdatedAt.UpdateDefault.(func() time.Time)
	// subtaskDescStatus is the schema descriptor for status field.
	subtaskDescStatus := subtaskFields[2].Descriptor()
	// subtask.DefaultStatus holds the default value on creation for the status field.
	subtask.DefaultStatus = subtaskDescStatus.Default.(bool)
	// subtaskDescID is the schema descriptor for id field.
	subtaskDescID := subtaskFields[0].Descriptor()
	// subtask.DefaultID holds the default value on creation for the id field.
	subtask.DefaultID = subtaskDescID.Default.(func() uuid.UUID)
	taskMixin := schema.Task{}.Mixin()
	taskMixinFields0 := taskMixin[0].Fields()
	_ = taskMixinFields0
	taskFields := schema.Task{}.Fields()
	_ = taskFields
	// taskDescCreatedAt is the schema descriptor for created_at field.
	taskDescCreatedAt := taskMixinFields0[0].Descriptor()
	// task.DefaultCreatedAt holds the default value on creation for the created_at field.
	task.DefaultCreatedAt = taskDescCreatedAt.Default.(func() time.Time)
	// taskDescUpdatedAt is the schema descriptor for updated_at field.
	taskDescUpdatedAt := taskMixinFields0[1].Descriptor()
	// task.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	task.DefaultUpdatedAt = taskDescUpdatedAt.Default.(func() time.Time)
	// task.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	task.UpdateDefaultUpdatedAt = taskDescUpdatedAt.UpdateDefault.(func() time.Time)
	// taskDescStatus is the schema descriptor for status field.
	taskDescStatus := taskFields[1].Descriptor()
	// task.DefaultStatus holds the default value on creation for the status field.
	task.DefaultStatus = taskDescStatus.Default.(bool)
	// taskDescName is the schema descriptor for name field.
	taskDescName := taskFields[2].Descriptor()
	// task.NameValidator is a validator for the "name" field. It is called by the builders before save.
	task.NameValidator = func() func(string) error {
		validators := taskDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// taskDescComment is the schema descriptor for comment field.
	taskDescComment := taskFields[3].Descriptor()
	// task.DefaultComment holds the default value on creation for the comment field.
	task.DefaultComment = taskDescComment.Default.(string)
	// task.CommentValidator is a validator for the "comment" field. It is called by the builders before save.
	task.CommentValidator = taskDescComment.Validators[0].(func(string) error)
	// taskDescID is the schema descriptor for id field.
	taskDescID := taskFields[0].Descriptor()
	// task.DefaultID holds the default value on creation for the id field.
	task.DefaultID = taskDescID.Default.(func() uuid.UUID)
	tokenMixin := schema.Token{}.Mixin()
	tokenMixinFields0 := tokenMixin[0].Fields()
	_ = tokenMixinFields0
	tokenFields := schema.Token{}.Fields()
	_ = tokenFields
	// tokenDescCreatedAt is the schema descriptor for created_at field.
	tokenDescCreatedAt := tokenMixinFields0[0].Descriptor()
	// token.DefaultCreatedAt holds the default value on creation for the created_at field.
	token.DefaultCreatedAt = tokenDescCreatedAt.Default.(func() time.Time)
	// tokenDescUpdatedAt is the schema descriptor for updated_at field.
	tokenDescUpdatedAt := tokenMixinFields0[1].Descriptor()
	// token.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	token.DefaultUpdatedAt = tokenDescUpdatedAt.Default.(func() time.Time)
	// token.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	token.UpdateDefaultUpdatedAt = tokenDescUpdatedAt.UpdateDefault.(func() time.Time)
	// tokenDescStatus is the schema descriptor for status field.
	tokenDescStatus := tokenFields[2].Descriptor()
	// token.DefaultStatus holds the default value on creation for the status field.
	token.DefaultStatus = tokenDescStatus.Default.(bool)
	// tokenDescName is the schema descriptor for name field.
	tokenDescName := tokenFields[3].Descriptor()
	// token.NameValidator is a validator for the "name" field. It is called by the builders before save.
	token.NameValidator = func() func(string) error {
		validators := tokenDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tokenDescRemark is the schema descriptor for remark field.
	tokenDescRemark := tokenFields[4].Descriptor()
	// token.DefaultRemark holds the default value on creation for the remark field.
	token.DefaultRemark = tokenDescRemark.Default.(string)
	// token.RemarkValidator is a validator for the "remark" field. It is called by the builders before save.
	token.RemarkValidator = tokenDescRemark.Validators[0].(func(string) error)
	// tokenDescToken is the schema descriptor for token field.
	tokenDescToken := tokenFields[5].Descriptor()
	// token.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	token.TokenValidator = func() func(string) error {
		validators := tokenDescToken.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(token string) error {
			for _, fn := range fns {
				if err := fn(token); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tokenDescID is the schema descriptor for id field.
	tokenDescID := tokenFields[0].Descriptor()
	// token.DefaultID holds the default value on creation for the id field.
	token.DefaultID = tokenDescID.Default.(func() uuid.UUID)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescStatus is the schema descriptor for status field.
	userDescStatus := userFields[1].Descriptor()
	// user.DefaultStatus holds the default value on creation for the status field.
	user.DefaultStatus = userDescStatus.Default.(bool)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[2].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[3].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = func() func(string) error {
		validators := userDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[4].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescAvatarURL is the schema descriptor for avatar_url field.
	userDescAvatarURL := userFields[5].Descriptor()
	// user.AvatarURLValidator is a validator for the "avatar_url" field. It is called by the builders before save.
	user.AvatarURLValidator = userDescAvatarURL.Validators[0].(func(string) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}

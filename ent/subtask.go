// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"sonar-bat/ent/subtask"
	"sonar-bat/ent/task"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Subtask is the model entity for the Subtask schema.
type Subtask struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy uuid.UUID `json:"updated_by,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID uuid.UUID `json:"task_id,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// DetectionType holds the value of the "detection_type" field.
	DetectionType int16 `json:"detection_type,omitempty"`
	// Params holds the value of the "params" field.
	Params map[string]interface{} `json:"params,omitempty"`
	// SrcEpFilterStrategy holds the value of the "src_ep_filter_strategy" field.
	SrcEpFilterStrategy map[string]interface{} `json:"src_ep_filter_strategy,omitempty"`
	// SrcEpSelStrategy holds the value of the "src_ep_sel_strategy" field.
	SrcEpSelStrategy map[string]interface{} `json:"src_ep_sel_strategy,omitempty"`
	// SrcEpSelNum holds the value of the "src_ep_sel_num" field.
	SrcEpSelNum int `json:"src_ep_sel_num,omitempty"`
	// DstEpFilterStrategy holds the value of the "dst_ep_filter_strategy" field.
	DstEpFilterStrategy map[string]interface{} `json:"dst_ep_filter_strategy,omitempty"`
	// DstEpSelStrategy holds the value of the "dst_ep_sel_strategy" field.
	DstEpSelStrategy map[string]interface{} `json:"dst_ep_sel_strategy,omitempty"`
	// DstEpSelNum holds the value of the "dst_ep_sel_num" field.
	DstEpSelNum int `json:"dst_ep_sel_num,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubtaskQuery when eager-loading is set.
	Edges        SubtaskEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubtaskEdges holds the relations/edges for other nodes in the graph.
type SubtaskEdges struct {
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubtaskEdges) TaskOrErr() (*Task, error) {
	if e.Task != nil {
		return e.Task, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: task.Label}
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subtask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subtask.FieldParams, subtask.FieldSrcEpFilterStrategy, subtask.FieldSrcEpSelStrategy, subtask.FieldDstEpFilterStrategy, subtask.FieldDstEpSelStrategy:
			values[i] = new([]byte)
		case subtask.FieldStatus:
			values[i] = new(sql.NullBool)
		case subtask.FieldDetectionType, subtask.FieldSrcEpSelNum, subtask.FieldDstEpSelNum:
			values[i] = new(sql.NullInt64)
		case subtask.FieldCreatedAt, subtask.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case subtask.FieldID, subtask.FieldUpdatedBy, subtask.FieldCreatedBy, subtask.FieldTaskID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subtask fields.
func (s *Subtask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subtask.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case subtask.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case subtask.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case subtask.FieldUpdatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value != nil {
				s.UpdatedBy = *value
			}
		case subtask.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				s.CreatedBy = *value
			}
		case subtask.FieldTaskID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value != nil {
				s.TaskID = *value
			}
		case subtask.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = value.Bool
			}
		case subtask.FieldDetectionType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field detection_type", values[i])
			} else if value.Valid {
				s.DetectionType = int16(value.Int64)
			}
		case subtask.FieldParams:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field params", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Params); err != nil {
					return fmt.Errorf("unmarshal field params: %w", err)
				}
			}
		case subtask.FieldSrcEpFilterStrategy:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field src_ep_filter_strategy", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.SrcEpFilterStrategy); err != nil {
					return fmt.Errorf("unmarshal field src_ep_filter_strategy: %w", err)
				}
			}
		case subtask.FieldSrcEpSelStrategy:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field src_ep_sel_strategy", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.SrcEpSelStrategy); err != nil {
					return fmt.Errorf("unmarshal field src_ep_sel_strategy: %w", err)
				}
			}
		case subtask.FieldSrcEpSelNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field src_ep_sel_num", values[i])
			} else if value.Valid {
				s.SrcEpSelNum = int(value.Int64)
			}
		case subtask.FieldDstEpFilterStrategy:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dst_ep_filter_strategy", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.DstEpFilterStrategy); err != nil {
					return fmt.Errorf("unmarshal field dst_ep_filter_strategy: %w", err)
				}
			}
		case subtask.FieldDstEpSelStrategy:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dst_ep_sel_strategy", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.DstEpSelStrategy); err != nil {
					return fmt.Errorf("unmarshal field dst_ep_sel_strategy: %w", err)
				}
			}
		case subtask.FieldDstEpSelNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dst_ep_sel_num", values[i])
			} else if value.Valid {
				s.DstEpSelNum = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Subtask.
// This includes values selected through modifiers, order, etc.
func (s *Subtask) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryTask queries the "task" edge of the Subtask entity.
func (s *Subtask) QueryTask() *TaskQuery {
	return NewSubtaskClient(s.config).QueryTask(s)
}

// Update returns a builder for updating this Subtask.
// Note that you need to call Subtask.Unwrap() before calling this method if this Subtask
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subtask) Update() *SubtaskUpdateOne {
	return NewSubtaskClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Subtask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Subtask) Unwrap() *Subtask {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Subtask is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subtask) String() string {
	var builder strings.Builder
	builder.WriteString("Subtask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", s.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", s.TaskID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", ")
	builder.WriteString("detection_type=")
	builder.WriteString(fmt.Sprintf("%v", s.DetectionType))
	builder.WriteString(", ")
	builder.WriteString("params=")
	builder.WriteString(fmt.Sprintf("%v", s.Params))
	builder.WriteString(", ")
	builder.WriteString("src_ep_filter_strategy=")
	builder.WriteString(fmt.Sprintf("%v", s.SrcEpFilterStrategy))
	builder.WriteString(", ")
	builder.WriteString("src_ep_sel_strategy=")
	builder.WriteString(fmt.Sprintf("%v", s.SrcEpSelStrategy))
	builder.WriteString(", ")
	builder.WriteString("src_ep_sel_num=")
	builder.WriteString(fmt.Sprintf("%v", s.SrcEpSelNum))
	builder.WriteString(", ")
	builder.WriteString("dst_ep_filter_strategy=")
	builder.WriteString(fmt.Sprintf("%v", s.DstEpFilterStrategy))
	builder.WriteString(", ")
	builder.WriteString("dst_ep_sel_strategy=")
	builder.WriteString(fmt.Sprintf("%v", s.DstEpSelStrategy))
	builder.WriteString(", ")
	builder.WriteString("dst_ep_sel_num=")
	builder.WriteString(fmt.Sprintf("%v", s.DstEpSelNum))
	builder.WriteByte(')')
	return builder.String()
}

// Subtasks is a parsable slice of Subtask.
type Subtasks []*Subtask

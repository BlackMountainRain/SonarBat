// Code generated by ent, DO NOT EDIT.

package subtask

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the subtask type in the database.
	Label = "subtask"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDetectionType holds the string denoting the detection_type field in the database.
	FieldDetectionType = "detection_type"
	// FieldParams holds the string denoting the params field in the database.
	FieldParams = "params"
	// FieldSrcEpFilterStrategy holds the string denoting the src_ep_filter_strategy field in the database.
	FieldSrcEpFilterStrategy = "src_ep_filter_strategy"
	// FieldSrcEpSelStrategy holds the string denoting the src_ep_sel_strategy field in the database.
	FieldSrcEpSelStrategy = "src_ep_sel_strategy"
	// FieldSrcEpSelNum holds the string denoting the src_ep_sel_num field in the database.
	FieldSrcEpSelNum = "src_ep_sel_num"
	// FieldDstEpFilterStrategy holds the string denoting the dst_ep_filter_strategy field in the database.
	FieldDstEpFilterStrategy = "dst_ep_filter_strategy"
	// FieldDstEpSelStrategy holds the string denoting the dst_ep_sel_strategy field in the database.
	FieldDstEpSelStrategy = "dst_ep_sel_strategy"
	// FieldDstEpSelNum holds the string denoting the dst_ep_sel_num field in the database.
	FieldDstEpSelNum = "dst_ep_sel_num"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// Table holds the table name of the subtask in the database.
	Table = "subtasks"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "subtasks"
	// TaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskInverseTable = "tasks"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "task_id"
)

// Columns holds all SQL columns for subtask fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUpdatedBy,
	FieldCreatedBy,
	FieldTaskID,
	FieldStatus,
	FieldDetectionType,
	FieldParams,
	FieldSrcEpFilterStrategy,
	FieldSrcEpSelStrategy,
	FieldSrcEpSelNum,
	FieldDstEpFilterStrategy,
	FieldDstEpSelStrategy,
	FieldDstEpSelNum,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Subtask queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDetectionType orders the results by the detection_type field.
func ByDetectionType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetectionType, opts...).ToFunc()
}

// BySrcEpSelNum orders the results by the src_ep_sel_num field.
func BySrcEpSelNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSrcEpSelNum, opts...).ToFunc()
}

// ByDstEpSelNum orders the results by the dst_ep_sel_num field.
func ByDstEpSelNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDstEpSelNum, opts...).ToFunc()
}

// ByTaskField orders the results by task field.
func ByTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), sql.OrderByField(field, opts...))
	}
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
	)
}
